
Workshop_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb0  08002bb0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bb8  08002bb8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002bc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000001c  08002bdc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002bdc  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007faf  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001321  00000000  00000000  00027ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  00029320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f840  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000674d  00000000  00000000  00049d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ba6  00000000  00000000  00050465  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011300b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e0  00000000  00000000  00113088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b88 	.word	0x08002b88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002b88 	.word	0x08002b88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__aeabi_uldivmod>:
 8000580:	b953      	cbnz	r3, 8000598 <__aeabi_uldivmod+0x18>
 8000582:	b94a      	cbnz	r2, 8000598 <__aeabi_uldivmod+0x18>
 8000584:	2900      	cmp	r1, #0
 8000586:	bf08      	it	eq
 8000588:	2800      	cmpeq	r0, #0
 800058a:	bf1c      	itt	ne
 800058c:	f04f 31ff 	movne.w	r1, #4294967295
 8000590:	f04f 30ff 	movne.w	r0, #4294967295
 8000594:	f000 b972 	b.w	800087c <__aeabi_idiv0>
 8000598:	f1ad 0c08 	sub.w	ip, sp, #8
 800059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr

080005b0 <__udivmoddi4>:
 80005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b4:	9e08      	ldr	r6, [sp, #32]
 80005b6:	4604      	mov	r4, r0
 80005b8:	4688      	mov	r8, r1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d14b      	bne.n	8000656 <__udivmoddi4+0xa6>
 80005be:	428a      	cmp	r2, r1
 80005c0:	4615      	mov	r5, r2
 80005c2:	d967      	bls.n	8000694 <__udivmoddi4+0xe4>
 80005c4:	fab2 f282 	clz	r2, r2
 80005c8:	b14a      	cbz	r2, 80005de <__udivmoddi4+0x2e>
 80005ca:	f1c2 0720 	rsb	r7, r2, #32
 80005ce:	fa01 f302 	lsl.w	r3, r1, r2
 80005d2:	fa20 f707 	lsr.w	r7, r0, r7
 80005d6:	4095      	lsls	r5, r2
 80005d8:	ea47 0803 	orr.w	r8, r7, r3
 80005dc:	4094      	lsls	r4, r2
 80005de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e2:	0c23      	lsrs	r3, r4, #16
 80005e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80005e8:	fa1f fc85 	uxth.w	ip, r5
 80005ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80005f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005f4:	fb07 f10c 	mul.w	r1, r7, ip
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x60>
 80005fc:	18eb      	adds	r3, r5, r3
 80005fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000602:	f080 811b 	bcs.w	800083c <__udivmoddi4+0x28c>
 8000606:	4299      	cmp	r1, r3
 8000608:	f240 8118 	bls.w	800083c <__udivmoddi4+0x28c>
 800060c:	3f02      	subs	r7, #2
 800060e:	442b      	add	r3, r5
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	b2a4      	uxth	r4, r4
 8000614:	fbb3 f0fe 	udiv	r0, r3, lr
 8000618:	fb0e 3310 	mls	r3, lr, r0, r3
 800061c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000620:	fb00 fc0c 	mul.w	ip, r0, ip
 8000624:	45a4      	cmp	ip, r4
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x8c>
 8000628:	192c      	adds	r4, r5, r4
 800062a:	f100 33ff 	add.w	r3, r0, #4294967295
 800062e:	f080 8107 	bcs.w	8000840 <__udivmoddi4+0x290>
 8000632:	45a4      	cmp	ip, r4
 8000634:	f240 8104 	bls.w	8000840 <__udivmoddi4+0x290>
 8000638:	3802      	subs	r0, #2
 800063a:	442c      	add	r4, r5
 800063c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000640:	eba4 040c 	sub.w	r4, r4, ip
 8000644:	2700      	movs	r7, #0
 8000646:	b11e      	cbz	r6, 8000650 <__udivmoddi4+0xa0>
 8000648:	40d4      	lsrs	r4, r2
 800064a:	2300      	movs	r3, #0
 800064c:	e9c6 4300 	strd	r4, r3, [r6]
 8000650:	4639      	mov	r1, r7
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	428b      	cmp	r3, r1
 8000658:	d909      	bls.n	800066e <__udivmoddi4+0xbe>
 800065a:	2e00      	cmp	r6, #0
 800065c:	f000 80eb 	beq.w	8000836 <__udivmoddi4+0x286>
 8000660:	2700      	movs	r7, #0
 8000662:	e9c6 0100 	strd	r0, r1, [r6]
 8000666:	4638      	mov	r0, r7
 8000668:	4639      	mov	r1, r7
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066e:	fab3 f783 	clz	r7, r3
 8000672:	2f00      	cmp	r7, #0
 8000674:	d147      	bne.n	8000706 <__udivmoddi4+0x156>
 8000676:	428b      	cmp	r3, r1
 8000678:	d302      	bcc.n	8000680 <__udivmoddi4+0xd0>
 800067a:	4282      	cmp	r2, r0
 800067c:	f200 80fa 	bhi.w	8000874 <__udivmoddi4+0x2c4>
 8000680:	1a84      	subs	r4, r0, r2
 8000682:	eb61 0303 	sbc.w	r3, r1, r3
 8000686:	2001      	movs	r0, #1
 8000688:	4698      	mov	r8, r3
 800068a:	2e00      	cmp	r6, #0
 800068c:	d0e0      	beq.n	8000650 <__udivmoddi4+0xa0>
 800068e:	e9c6 4800 	strd	r4, r8, [r6]
 8000692:	e7dd      	b.n	8000650 <__udivmoddi4+0xa0>
 8000694:	b902      	cbnz	r2, 8000698 <__udivmoddi4+0xe8>
 8000696:	deff      	udf	#255	; 0xff
 8000698:	fab2 f282 	clz	r2, r2
 800069c:	2a00      	cmp	r2, #0
 800069e:	f040 808f 	bne.w	80007c0 <__udivmoddi4+0x210>
 80006a2:	1b49      	subs	r1, r1, r5
 80006a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a8:	fa1f f885 	uxth.w	r8, r5
 80006ac:	2701      	movs	r7, #1
 80006ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb08 f10c 	mul.w	r1, r8, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d907      	bls.n	80006d4 <__udivmoddi4+0x124>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006ca:	d202      	bcs.n	80006d2 <__udivmoddi4+0x122>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	f200 80cd 	bhi.w	800086c <__udivmoddi4+0x2bc>
 80006d2:	4684      	mov	ip, r0
 80006d4:	1a59      	subs	r1, r3, r1
 80006d6:	b2a3      	uxth	r3, r4
 80006d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80006dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80006e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006e4:	fb08 f800 	mul.w	r8, r8, r0
 80006e8:	45a0      	cmp	r8, r4
 80006ea:	d907      	bls.n	80006fc <__udivmoddi4+0x14c>
 80006ec:	192c      	adds	r4, r5, r4
 80006ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x14a>
 80006f4:	45a0      	cmp	r8, r4
 80006f6:	f200 80b6 	bhi.w	8000866 <__udivmoddi4+0x2b6>
 80006fa:	4618      	mov	r0, r3
 80006fc:	eba4 0408 	sub.w	r4, r4, r8
 8000700:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000704:	e79f      	b.n	8000646 <__udivmoddi4+0x96>
 8000706:	f1c7 0c20 	rsb	ip, r7, #32
 800070a:	40bb      	lsls	r3, r7
 800070c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000710:	ea4e 0e03 	orr.w	lr, lr, r3
 8000714:	fa01 f407 	lsl.w	r4, r1, r7
 8000718:	fa20 f50c 	lsr.w	r5, r0, ip
 800071c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000720:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000724:	4325      	orrs	r5, r4
 8000726:	fbb3 f9f8 	udiv	r9, r3, r8
 800072a:	0c2c      	lsrs	r4, r5, #16
 800072c:	fb08 3319 	mls	r3, r8, r9, r3
 8000730:	fa1f fa8e 	uxth.w	sl, lr
 8000734:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000738:	fb09 f40a 	mul.w	r4, r9, sl
 800073c:	429c      	cmp	r4, r3
 800073e:	fa02 f207 	lsl.w	r2, r2, r7
 8000742:	fa00 f107 	lsl.w	r1, r0, r7
 8000746:	d90b      	bls.n	8000760 <__udivmoddi4+0x1b0>
 8000748:	eb1e 0303 	adds.w	r3, lr, r3
 800074c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000750:	f080 8087 	bcs.w	8000862 <__udivmoddi4+0x2b2>
 8000754:	429c      	cmp	r4, r3
 8000756:	f240 8084 	bls.w	8000862 <__udivmoddi4+0x2b2>
 800075a:	f1a9 0902 	sub.w	r9, r9, #2
 800075e:	4473      	add	r3, lr
 8000760:	1b1b      	subs	r3, r3, r4
 8000762:	b2ad      	uxth	r5, r5
 8000764:	fbb3 f0f8 	udiv	r0, r3, r8
 8000768:	fb08 3310 	mls	r3, r8, r0, r3
 800076c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000770:	fb00 fa0a 	mul.w	sl, r0, sl
 8000774:	45a2      	cmp	sl, r4
 8000776:	d908      	bls.n	800078a <__udivmoddi4+0x1da>
 8000778:	eb1e 0404 	adds.w	r4, lr, r4
 800077c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000780:	d26b      	bcs.n	800085a <__udivmoddi4+0x2aa>
 8000782:	45a2      	cmp	sl, r4
 8000784:	d969      	bls.n	800085a <__udivmoddi4+0x2aa>
 8000786:	3802      	subs	r0, #2
 8000788:	4474      	add	r4, lr
 800078a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800078e:	fba0 8902 	umull	r8, r9, r0, r2
 8000792:	eba4 040a 	sub.w	r4, r4, sl
 8000796:	454c      	cmp	r4, r9
 8000798:	46c2      	mov	sl, r8
 800079a:	464b      	mov	r3, r9
 800079c:	d354      	bcc.n	8000848 <__udivmoddi4+0x298>
 800079e:	d051      	beq.n	8000844 <__udivmoddi4+0x294>
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d069      	beq.n	8000878 <__udivmoddi4+0x2c8>
 80007a4:	ebb1 050a 	subs.w	r5, r1, sl
 80007a8:	eb64 0403 	sbc.w	r4, r4, r3
 80007ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007b0:	40fd      	lsrs	r5, r7
 80007b2:	40fc      	lsrs	r4, r7
 80007b4:	ea4c 0505 	orr.w	r5, ip, r5
 80007b8:	e9c6 5400 	strd	r5, r4, [r6]
 80007bc:	2700      	movs	r7, #0
 80007be:	e747      	b.n	8000650 <__udivmoddi4+0xa0>
 80007c0:	f1c2 0320 	rsb	r3, r2, #32
 80007c4:	fa20 f703 	lsr.w	r7, r0, r3
 80007c8:	4095      	lsls	r5, r2
 80007ca:	fa01 f002 	lsl.w	r0, r1, r2
 80007ce:	fa21 f303 	lsr.w	r3, r1, r3
 80007d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d6:	4338      	orrs	r0, r7
 80007d8:	0c01      	lsrs	r1, r0, #16
 80007da:	fbb3 f7fe 	udiv	r7, r3, lr
 80007de:	fa1f f885 	uxth.w	r8, r5
 80007e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80007e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007ea:	fb07 f308 	mul.w	r3, r7, r8
 80007ee:	428b      	cmp	r3, r1
 80007f0:	fa04 f402 	lsl.w	r4, r4, r2
 80007f4:	d907      	bls.n	8000806 <__udivmoddi4+0x256>
 80007f6:	1869      	adds	r1, r5, r1
 80007f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80007fc:	d22f      	bcs.n	800085e <__udivmoddi4+0x2ae>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d92d      	bls.n	800085e <__udivmoddi4+0x2ae>
 8000802:	3f02      	subs	r7, #2
 8000804:	4429      	add	r1, r5
 8000806:	1acb      	subs	r3, r1, r3
 8000808:	b281      	uxth	r1, r0
 800080a:	fbb3 f0fe 	udiv	r0, r3, lr
 800080e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000812:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000816:	fb00 f308 	mul.w	r3, r0, r8
 800081a:	428b      	cmp	r3, r1
 800081c:	d907      	bls.n	800082e <__udivmoddi4+0x27e>
 800081e:	1869      	adds	r1, r5, r1
 8000820:	f100 3cff 	add.w	ip, r0, #4294967295
 8000824:	d217      	bcs.n	8000856 <__udivmoddi4+0x2a6>
 8000826:	428b      	cmp	r3, r1
 8000828:	d915      	bls.n	8000856 <__udivmoddi4+0x2a6>
 800082a:	3802      	subs	r0, #2
 800082c:	4429      	add	r1, r5
 800082e:	1ac9      	subs	r1, r1, r3
 8000830:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000834:	e73b      	b.n	80006ae <__udivmoddi4+0xfe>
 8000836:	4637      	mov	r7, r6
 8000838:	4630      	mov	r0, r6
 800083a:	e709      	b.n	8000650 <__udivmoddi4+0xa0>
 800083c:	4607      	mov	r7, r0
 800083e:	e6e7      	b.n	8000610 <__udivmoddi4+0x60>
 8000840:	4618      	mov	r0, r3
 8000842:	e6fb      	b.n	800063c <__udivmoddi4+0x8c>
 8000844:	4541      	cmp	r1, r8
 8000846:	d2ab      	bcs.n	80007a0 <__udivmoddi4+0x1f0>
 8000848:	ebb8 0a02 	subs.w	sl, r8, r2
 800084c:	eb69 020e 	sbc.w	r2, r9, lr
 8000850:	3801      	subs	r0, #1
 8000852:	4613      	mov	r3, r2
 8000854:	e7a4      	b.n	80007a0 <__udivmoddi4+0x1f0>
 8000856:	4660      	mov	r0, ip
 8000858:	e7e9      	b.n	800082e <__udivmoddi4+0x27e>
 800085a:	4618      	mov	r0, r3
 800085c:	e795      	b.n	800078a <__udivmoddi4+0x1da>
 800085e:	4667      	mov	r7, ip
 8000860:	e7d1      	b.n	8000806 <__udivmoddi4+0x256>
 8000862:	4681      	mov	r9, r0
 8000864:	e77c      	b.n	8000760 <__udivmoddi4+0x1b0>
 8000866:	3802      	subs	r0, #2
 8000868:	442c      	add	r4, r5
 800086a:	e747      	b.n	80006fc <__udivmoddi4+0x14c>
 800086c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000870:	442b      	add	r3, r5
 8000872:	e72f      	b.n	80006d4 <__udivmoddi4+0x124>
 8000874:	4638      	mov	r0, r7
 8000876:	e708      	b.n	800068a <__udivmoddi4+0xda>
 8000878:	4637      	mov	r7, r6
 800087a:	e6e9      	b.n	8000650 <__udivmoddi4+0xa0>

0800087c <__aeabi_idiv0>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b598      	push	{r3, r4, r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fba4 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f868 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f96a 	bl	8000b64 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000890:	f000 f8d0 	bl	8000a34 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM4-> PSC= getFreq();
 8000894:	f000 fa84 	bl	8000da0 <getFreq>
 8000898:	ec53 2b10 	vmov	r2, r3, d0
 800089c:	4c2d      	ldr	r4, [pc, #180]	; (8000954 <main+0xd4>)
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	f7ff fe4d 	bl	8000540 <__aeabi_d2uiz>
 80008a6:	4603      	mov	r3, r0
 80008a8:	62a3      	str	r3, [r4, #40]	; 0x28
	  switch (getPinNum()) {
 80008aa:	f000 fa6d 	bl	8000d88 <getPinNum>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d8ef      	bhi.n	8000894 <main+0x14>
 80008b4:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <main+0x3c>)
 80008b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ba:	bf00      	nop
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008ef 	.word	0x080008ef
 80008c4:	0800090d 	.word	0x0800090d
 80008c8:	0800092b 	.word	0x0800092b
 80008cc:	08000949 	.word	0x08000949
	  case 0:
		  HAL_TIM_PWM_Start (& htim4, TIM_CHANNEL_1);
 80008d0:	2100      	movs	r1, #0
 80008d2:	4821      	ldr	r0, [pc, #132]	; (8000958 <main+0xd8>)
 80008d4:	f001 fb8c 	bl	8001ff0 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Stop (& htim4, TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 80008d8:	210c      	movs	r1, #12
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <main+0xd8>)
 80008dc:	f001 fbc6 	bl	800206c <HAL_TIM_PWM_Stop>
		  TIM4-> CCR1 = getCycle();
 80008e0:	f000 fa46 	bl	8000d70 <getCycle>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <main+0xd4>)
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
		  break;
 80008ec:	e031      	b.n	8000952 <main+0xd2>
	  case 1:
		  HAL_TIM_PWM_Start (& htim4, TIM_CHANNEL_2);
 80008ee:	2104      	movs	r1, #4
 80008f0:	4819      	ldr	r0, [pc, #100]	; (8000958 <main+0xd8>)
 80008f2:	f001 fb7d 	bl	8001ff0 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Stop (& htim4, TIM_CHANNEL_1);
 80008f6:	2100      	movs	r1, #0
 80008f8:	4817      	ldr	r0, [pc, #92]	; (8000958 <main+0xd8>)
 80008fa:	f001 fbb7 	bl	800206c <HAL_TIM_PWM_Stop>
		  TIM4-> CCR2 = getCycle();
 80008fe:	f000 fa37 	bl	8000d70 <getCycle>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <main+0xd4>)
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 800090a:	e022      	b.n	8000952 <main+0xd2>
	  case 2:
		  HAL_TIM_PWM_Start (& htim4, TIM_CHANNEL_3);
 800090c:	2108      	movs	r1, #8
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <main+0xd8>)
 8000910:	f001 fb6e 	bl	8001ff0 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Stop (& htim4, TIM_CHANNEL_2);
 8000914:	2104      	movs	r1, #4
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <main+0xd8>)
 8000918:	f001 fba8 	bl	800206c <HAL_TIM_PWM_Stop>
		  TIM4-> CCR3 = getCycle();
 800091c:	f000 fa28 	bl	8000d70 <getCycle>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <main+0xd4>)
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
		  break;
 8000928:	e013      	b.n	8000952 <main+0xd2>
	  case 3:
		  HAL_TIM_PWM_Start (& htim4, TIM_CHANNEL_4);
 800092a:	210c      	movs	r1, #12
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <main+0xd8>)
 800092e:	f001 fb5f 	bl	8001ff0 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Stop (& htim4, TIM_CHANNEL_3);
 8000932:	2108      	movs	r1, #8
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <main+0xd8>)
 8000936:	f001 fb99 	bl	800206c <HAL_TIM_PWM_Stop>
		  TIM4-> CCR4 = getCycle();
 800093a:	f000 fa19 	bl	8000d70 <getCycle>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <main+0xd4>)
 8000944:	641a      	str	r2, [r3, #64]	; 0x40
		  break;
 8000946:	e004      	b.n	8000952 <main+0xd2>
	  case 4:
		  HAL_TIM_PWM_Stop (& htim4, TIM_CHANNEL_4);
 8000948:	210c      	movs	r1, #12
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <main+0xd8>)
 800094c:	f001 fb8e 	bl	800206c <HAL_TIM_PWM_Stop>
		  break;
 8000950:	bf00      	nop
	  TIM4-> PSC= getFreq();
 8000952:	e79f      	b.n	8000894 <main+0x14>
 8000954:	40000800 	.word	0x40000800
 8000958:	2000003c 	.word	0x2000003c

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f002 f904 	bl	8002b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <SystemClock_Config+0xd0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <SystemClock_Config+0xd0>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <SystemClock_Config+0xd0>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xd4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <SystemClock_Config+0xd4>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <SystemClock_Config+0xd4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fe4f 	bl	8001684 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ec:	f000 f934 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 f8a8 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a1a:	f000 f91d 	bl	8000c58 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000a1e:	f001 f987 	bl	8001d30 <HAL_RCC_EnableCSS>
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	; 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a64:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a66:	4a3e      	ldr	r2, [pc, #248]	; (8000b60 <MX_TIM4_Init+0x12c>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a7a:	2263      	movs	r2, #99	; 0x63
 8000a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a8a:	4834      	ldr	r0, [pc, #208]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000a8c:	f001 fa4f 	bl	8001f2e <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a96:	f000 f8df 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000aa8:	f001 fbfe 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ab2:	f000 f8d1 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ab6:	4829      	ldr	r0, [pc, #164]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000ab8:	f001 fa64 	bl	8001f84 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ac2:	f000 f8c9 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000ad6:	f001 ffaf 	bl	8002a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ae0:	f000 f8ba 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000afc:	f001 fb0e 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b06:	f000 f8a7 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4812      	ldr	r0, [pc, #72]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000b12:	f001 fb03 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000b1c:	f000 f89c 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2208      	movs	r2, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000b28:	f001 faf8 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000b32:	f000 f891 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	220c      	movs	r2, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000b3e:	f001 faed 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000b48:	f000 f886 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM4_Init+0x128>)
 8000b4e:	f000 f8d5 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 8000b52:	bf00      	nop
 8000b54:	3738      	adds	r7, #56	; 0x38
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000003c 	.word	0x2000003c
 8000b60:	40000800 	.word	0x40000800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_GPIO_Init+0xe4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000bea:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_GPIO_Init+0xe8>)
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_GPIO_Init+0xec>)
 8000c00:	f000 fb6a 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_GPIO_Init+0xe8>)
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <MX_GPIO_Init+0xf0>)
 8000c1a:	f000 fb5d 	bl	80012d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2017      	movs	r0, #23
 8000c24:	f000 fb21 	bl	800126a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c28:	2017      	movs	r0, #23
 8000c2a:	f000 fb3a 	bl	80012a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f000 fb19 	bl	800126a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f000 fb32 	bl	80012a2 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	10210000 	.word	0x10210000
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10d      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_TIM_Base_MspInit+0x40>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_TIM_Base_MspInit+0x40>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_TIM_Base_MspInit+0x40>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40000800 	.word	0x40000800
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11e      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_TIM_MspPostInit+0x70>)
 8000d58:	f000 fabe 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40000800 	.word	0x40000800
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <getCycle>:
/* USER CODE BEGIN PV */
static uint8_t cycle = 10;
static uint8_t pinNum = 0;
static double freq = 99;

uint8_t getCycle(void){
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return cycle;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <getCycle+0x14>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000000 	.word	0x20000000

08000d88 <getPinNum>:

uint8_t getPinNum(void){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	return pinNum;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <getPinNum+0x14>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000038 	.word	0x20000038

08000da0 <getFreq>:

double getFreq(void){
 8000da0:	b490      	push	{r4, r7}
 8000da2:	af00      	add	r7, sp, #0
	return freq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <getFreq+0x1c>)
 8000da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000daa:	ec44 3b17 	vmov	d7, r3, r4
}
 8000dae:	eeb0 0a47 	vmov.f32	s0, s14
 8000db2:	eef0 0a67 	vmov.f32	s1, s15
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc90      	pop	{r4, r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000dc4:	f001 f898 	bl	8001ef8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <BusFault_Handler+0x4>

08000dde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f92f 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e1c:	b598      	push	{r3, r4, r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4826      	ldr	r0, [pc, #152]	; (8000ebc <EXTI9_5_IRQHandler+0xa0>)
 8000e24:	f000 fbf2 	bl	800160c <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10d      	bne.n	8000e4a <EXTI9_5_IRQHandler+0x2e>
	  cycle += 5;
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3305      	adds	r3, #5
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e38:	701a      	strb	r2, [r3, #0]
      if (cycle > 100) cycle = 5;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d92e      	bls.n	8000ea0 <EXTI9_5_IRQHandler+0x84>
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e44:	2205      	movs	r2, #5
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e02a      	b.n	8000ea0 <EXTI9_5_IRQHandler+0x84>
  }
  else if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	481b      	ldr	r0, [pc, #108]	; (8000ebc <EXTI9_5_IRQHandler+0xa0>)
 8000e50:	f000 fbdc 	bl	800160c <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <EXTI9_5_IRQHandler+0x5a>
	  cycle -= 5;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3b05      	subs	r3, #5
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e64:	701a      	strb	r2, [r3, #0]
      if (cycle < 5) cycle = 100;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d818      	bhi.n	8000ea0 <EXTI9_5_IRQHandler+0x84>
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <EXTI9_5_IRQHandler+0xa4>)
 8000e70:	2264      	movs	r2, #100	; 0x64
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e014      	b.n	8000ea0 <EXTI9_5_IRQHandler+0x84>
  }
  else if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EXTI9_5_IRQHandler+0xa0>)
 8000e7c:	f000 fbc6 	bl	800160c <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <EXTI9_5_IRQHandler+0x84>
	  freq += 50;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <EXTI9_5_IRQHandler+0xa8>)
 8000e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <EXTI9_5_IRQHandler+0xac>)
 8000e92:	f7ff f99f 	bl	80001d4 <__adddf3>
 8000e96:	4603      	mov	r3, r0
 8000e98:	460c      	mov	r4, r1
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <EXTI9_5_IRQHandler+0xa8>)
 8000e9c:	e9c2 3400 	strd	r3, r4, [r2]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ea0:	2040      	movs	r0, #64	; 0x40
 8000ea2:	f000 fbcb 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ea6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000eaa:	f000 fbc7 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000eae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb2:	f000 fbc3 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd98      	pop	{r3, r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	40490000 	.word	0x40490000

08000ecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ecc:	b598      	push	{r3, r4, r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET){
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <EXTI15_10_IRQHandler+0x70>)
 8000ed6:	f000 fb99 	bl	800160c <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10d      	bne.n	8000efc <EXTI15_10_IRQHandler+0x30>
	  pinNum++;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <EXTI15_10_IRQHandler+0x74>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <EXTI15_10_IRQHandler+0x74>)
 8000eea:	701a      	strb	r2, [r3, #0]
	  if (pinNum > 4) pinNum = 0;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <EXTI15_10_IRQHandler+0x74>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d918      	bls.n	8000f26 <EXTI15_10_IRQHandler+0x5a>
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <EXTI15_10_IRQHandler+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e014      	b.n	8000f26 <EXTI15_10_IRQHandler+0x5a>
  }
  else if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET)
 8000efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <EXTI15_10_IRQHandler+0x78>)
 8000f02:	f000 fb83 	bl	800160c <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10c      	bne.n	8000f26 <EXTI15_10_IRQHandler+0x5a>
	  freq -= 50;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <EXTI15_10_IRQHandler+0x7c>)
 8000f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <EXTI15_10_IRQHandler+0x80>)
 8000f18:	f7ff f95a 	bl	80001d0 <__aeabi_dsub>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <EXTI15_10_IRQHandler+0x7c>)
 8000f22:	e9c2 3400 	strd	r3, r4, [r2]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f2a:	f000 fb87 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f32:	f000 fb83 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd98      	pop	{r3, r4, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	20000038 	.word	0x20000038
 8000f44:	40020800 	.word	0x40020800
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	40490000 	.word	0x40490000

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <SystemInit+0x28>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <SystemInit+0x28>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SystemInit+0x28>)
 8000f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
  ldr  r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd3 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f001 fdc1 	bl	8002b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fc67 	bl	8000880 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fb8:	08002bc0 	.word	0x08002bc0
  ldr  r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc0:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000fc4:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000fc8:	20000080 	.word	0x20000080

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <HAL_Init+0x40>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_Init+0x40>)
 8000fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x40>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f92b 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fe30 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f943 	bl	80012be <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f90b 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000010 	.word	0x20000010
 800106c:	20000018 	.word	0x20000018
 8001070:	20000014 	.word	0x20000014

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000018 	.word	0x20000018
 8001098:	2000007c 	.word	0x2000007c

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000007c 	.word	0x2000007c

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e16b      	b.n	80015cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 815a 	bne.w	80015c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00b      	beq.n	8001332 <HAL_GPIO_Init+0x5a>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001326:	2b11      	cmp	r3, #17
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b12      	cmp	r3, #18
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0xfc>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80b4 	beq.w	80015c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_GPIO_Init+0x308>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_GPIO_Init+0x308>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_GPIO_Init+0x308>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <HAL_GPIO_Init+0x30c>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a51      	ldr	r2, [pc, #324]	; (80015e8 <HAL_GPIO_Init+0x310>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d02b      	beq.n	80014fe <HAL_GPIO_Init+0x226>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a50      	ldr	r2, [pc, #320]	; (80015ec <HAL_GPIO_Init+0x314>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x222>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <HAL_GPIO_Init+0x318>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x21e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_GPIO_Init+0x31c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_GPIO_Init+0x320>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x216>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x324>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x212>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_GPIO_Init+0x328>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x20e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x32c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x20a>
 80014de:	2307      	movs	r3, #7
 80014e0:	e00e      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x228>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4934      	ldr	r1, [pc, #208]	; (80015e4 <HAL_GPIO_Init+0x30c>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <HAL_GPIO_Init+0x330>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <HAL_GPIO_Init+0x330>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x330>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_GPIO_Init+0x330>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_GPIO_Init+0x330>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_GPIO_Init+0x330>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_GPIO_Init+0x330>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_GPIO_Init+0x330>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f ae90 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40021c00 	.word	0x40021c00
 8001608:	40013c00 	.word	0x40013c00

0800160c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f806 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e25b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e236      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a90      	ldr	r2, [pc, #576]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a8a      	ldr	r2, [pc, #552]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b84      	ldr	r3, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a83      	ldr	r2, [pc, #524]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a80      	ldr	r2, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fcae 	bl	800109c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fcaa 	bl	800109c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1fb      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc9a 	bl	800109c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc96 	bl	800109c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1e7      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1bb      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4952      	ldr	r1, [pc, #328]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fc4f 	bl	800109c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fc4b 	bl	800109c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e19c      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4940      	ldr	r1, [pc, #256]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fc2e 	bl	800109c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fc2a 	bl	800109c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e17b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d030      	beq.n	80018d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fc0e 	bl	800109c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fc0a 	bl	800109c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e15b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e015      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fbf7 	bl	800109c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fbf3 	bl	800109c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e144      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a0 	beq.w	8001a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d121      	bne.n	800195e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fbb9 	bl	800109c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e011      	b.n	8001952 <HAL_RCC_OscConfig+0x2ce>
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	42470000 	.word	0x42470000
 8001938:	42470e80 	.word	0x42470e80
 800193c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff fbac 	bl	800109c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0fd      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x4d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 8001966:	4b7d      	ldr	r3, [pc, #500]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a7c      	ldr	r2, [pc, #496]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	e01c      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 800197c:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a76      	ldr	r2, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001996:	4b71      	ldr	r3, [pc, #452]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a70      	ldr	r2, [pc, #448]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a6d      	ldr	r2, [pc, #436]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb71 	bl	800109c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fb6d 	bl	800109c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0bc      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x33a>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb5b 	bl	800109c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fb57 	bl	800109c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0a6      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a51      	ldr	r2, [pc, #324]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8092 	beq.w	8001b4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d05c      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d141      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb2b 	bl	800109c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fb27 	bl	800109c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e078      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	4933      	ldr	r1, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fb00 	bl	800109c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fafc 	bl	800109c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04d      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
 8001abe:	e045      	b.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fae9 	bl	800109c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fae5 	bl	800109c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e036      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e029      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d10d      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470060 	.word	0x42470060

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cc      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d90c      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b65      	ldr	r3, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d044      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e067      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa22 	bl	800109c <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff fa1e 	bl	800109c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f82d 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001cee:	4601      	mov	r1, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f982 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08002ba0 	.word	0x08002ba0
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	20000014 	.word	0x20000014

08001d30 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_EnableCSS+0x14>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	4247004c 	.word	0x4247004c

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d007      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x32>
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x38>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80b4 	bne.w	8001edc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d76:	60bb      	str	r3, [r7, #8]
       break;
 8001d78:	e0b3      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d7c:	60bb      	str	r3, [r7, #8]
      break;
 8001d7e:	e0b0      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	4b58      	ldr	r3, [pc, #352]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d04a      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	f04f 0400 	mov.w	r4, #0
 8001da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	ea03 0501 	and.w	r5, r3, r1
 8001dac:	ea04 0602 	and.w	r6, r4, r2
 8001db0:	4629      	mov	r1, r5
 8001db2:	4632      	mov	r2, r6
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	f04f 0400 	mov.w	r4, #0
 8001dbc:	0154      	lsls	r4, r2, #5
 8001dbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dc2:	014b      	lsls	r3, r1, #5
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	1b49      	subs	r1, r1, r5
 8001dca:	eb62 0206 	sbc.w	r2, r2, r6
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f04f 0400 	mov.w	r4, #0
 8001dd6:	0194      	lsls	r4, r2, #6
 8001dd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ddc:	018b      	lsls	r3, r1, #6
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	eb64 0402 	sbc.w	r4, r4, r2
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	00e2      	lsls	r2, r4, #3
 8001dee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001df2:	00d9      	lsls	r1, r3, #3
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	195b      	adds	r3, r3, r5
 8001dfa:	eb44 0406 	adc.w	r4, r4, r6
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	0262      	lsls	r2, r4, #9
 8001e08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e0c:	0259      	lsls	r1, r3, #9
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4614      	mov	r4, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 0400 	mov.w	r4, #0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	f7fe fbae 	bl	8000580 <__aeabi_uldivmod>
 8001e24:	4603      	mov	r3, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e049      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	ea03 0501 	and.w	r5, r3, r1
 8001e42:	ea04 0602 	and.w	r6, r4, r2
 8001e46:	4629      	mov	r1, r5
 8001e48:	4632      	mov	r2, r6
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f04f 0400 	mov.w	r4, #0
 8001e52:	0154      	lsls	r4, r2, #5
 8001e54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e58:	014b      	lsls	r3, r1, #5
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	1b49      	subs	r1, r1, r5
 8001e60:	eb62 0206 	sbc.w	r2, r2, r6
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	f04f 0400 	mov.w	r4, #0
 8001e6c:	0194      	lsls	r4, r2, #6
 8001e6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e72:	018b      	lsls	r3, r1, #6
 8001e74:	1a5b      	subs	r3, r3, r1
 8001e76:	eb64 0402 	sbc.w	r4, r4, r2
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	00e2      	lsls	r2, r4, #3
 8001e84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e88:	00d9      	lsls	r1, r3, #3
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	195b      	adds	r3, r3, r5
 8001e90:	eb44 0406 	adc.w	r4, r4, r6
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	02a2      	lsls	r2, r4, #10
 8001e9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ea2:	0299      	lsls	r1, r3, #10
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4621      	mov	r1, r4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f04f 0400 	mov.w	r4, #0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	f7fe fb63 	bl	8000580 <__aeabi_uldivmod>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	60bb      	str	r3, [r7, #8]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ede:	60bb      	str	r3, [r7, #8]
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d104      	bne.n	8001f12 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001f08:	f000 f80a 	bl	8001f20 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_NMI_IRQHandler+0x24>)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	701a      	strb	r2, [r3, #0]
  }
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	4002380e 	.word	0x4002380e

08001f20 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e01d      	b.n	8001f7c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe feaf 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f000 fa53 	bl	8002418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01d      	b.n	8001fd2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f815 	bl	8001fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 fa28 	bl	8002418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2201      	movs	r2, #1
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fcf2 	bl	80029ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <HAL_TIM_PWM_Start+0x74>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_TIM_PWM_Start+0x2c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_PWM_Start+0x78>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_TIM_PWM_Start+0x30>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_TIM_PWM_Start+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d007      	beq.n	8002058 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fcb4 	bl	80029ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_TIM_PWM_Stop+0xa8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_TIM_PWM_Stop+0x2c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_TIM_PWM_Stop+0xac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_TIM_PWM_Stop+0x30>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_TIM_PWM_Stop+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d017      	beq.n	80020d2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_TIM_PWM_Stop+0x66>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	f240 4344 	movw	r3, #1092	; 0x444
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_PWM_Stop+0x66>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <HAL_TIM_PWM_Stop+0x96>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	f240 4344 	movw	r3, #1092	; 0x444
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_TIM_PWM_Stop+0x96>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010000 	.word	0x40010000
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002132:	2302      	movs	r3, #2
 8002134:	e0b4      	b.n	80022a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	f200 809f 	bhi.w	800228c <HAL_TIM_PWM_ConfigChannel+0x170>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002189 	.word	0x08002189
 8002158:	0800228d 	.word	0x0800228d
 800215c:	0800228d 	.word	0x0800228d
 8002160:	0800228d 	.word	0x0800228d
 8002164:	080021c9 	.word	0x080021c9
 8002168:	0800228d 	.word	0x0800228d
 800216c:	0800228d 	.word	0x0800228d
 8002170:	0800228d 	.word	0x0800228d
 8002174:	0800220b 	.word	0x0800220b
 8002178:	0800228d 	.word	0x0800228d
 800217c:	0800228d 	.word	0x0800228d
 8002180:	0800228d 	.word	0x0800228d
 8002184:	0800224b 	.word	0x0800224b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f9e2 	bl	8002558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0208 	orr.w	r2, r2, #8
 80021a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0204 	bic.w	r2, r2, #4
 80021b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6999      	ldr	r1, [r3, #24]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	619a      	str	r2, [r3, #24]
      break;
 80021c6:	e062      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa32 	bl	8002638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6999      	ldr	r1, [r3, #24]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	021a      	lsls	r2, r3, #8
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	619a      	str	r2, [r3, #24]
      break;
 8002208:	e041      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa87 	bl	8002724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0208 	orr.w	r2, r2, #8
 8002224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0204 	bic.w	r2, r2, #4
 8002234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	61da      	str	r2, [r3, #28]
      break;
 8002248:	e021      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fadb 	bl	800280c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69d9      	ldr	r1, [r3, #28]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	021a      	lsls	r2, r3, #8
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	61da      	str	r2, [r3, #28]
      break;
 800228a:	e000      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800228c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_TIM_ConfigClockSource+0x18>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0a6      	b.n	800240e <HAL_TIM_ConfigClockSource+0x166>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d067      	beq.n	80023c8 <HAL_TIM_ConfigClockSource+0x120>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d80b      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x6c>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d073      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x140>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d802      	bhi.n	800230a <HAL_TIM_ConfigClockSource+0x62>
 8002304:	2b00      	cmp	r3, #0
 8002306:	d06f      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002308:	e078      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800230a:	2b20      	cmp	r3, #32
 800230c:	d06c      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x140>
 800230e:	2b30      	cmp	r3, #48	; 0x30
 8002310:	d06a      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002312:	e073      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d00d      	beq.n	8002334 <HAL_TIM_ConfigClockSource+0x8c>
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d804      	bhi.n	8002326 <HAL_TIM_ConfigClockSource+0x7e>
 800231c:	2b50      	cmp	r3, #80	; 0x50
 800231e:	d033      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0xe0>
 8002320:	2b60      	cmp	r3, #96	; 0x60
 8002322:	d041      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002324:	e06a      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d066      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x152>
 800232c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002330:	d017      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002332:	e063      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f000 fb32 	bl	80029ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002356:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
      break;
 8002360:	e04c      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f000 fb1b 	bl	80029ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002384:	609a      	str	r2, [r3, #8]
      break;
 8002386:	e039      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	f000 fa8f 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2150      	movs	r1, #80	; 0x50
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fae8 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 80023a6:	e029      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f000 faae 	bl	8002916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2160      	movs	r1, #96	; 0x60
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fad8 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 80023c6:	e019      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f000 fa6f 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fac8 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 80023e6:	e009      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f000 fabf 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e000      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80023fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a40      	ldr	r2, [pc, #256]	; (800252c <TIM_Base_SetConfig+0x114>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <TIM_Base_SetConfig+0x40>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d00f      	beq.n	8002458 <TIM_Base_SetConfig+0x40>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <TIM_Base_SetConfig+0x118>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00b      	beq.n	8002458 <TIM_Base_SetConfig+0x40>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3c      	ldr	r2, [pc, #240]	; (8002534 <TIM_Base_SetConfig+0x11c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <TIM_Base_SetConfig+0x120>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3a      	ldr	r2, [pc, #232]	; (800253c <TIM_Base_SetConfig+0x124>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d108      	bne.n	800246a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2f      	ldr	r2, [pc, #188]	; (800252c <TIM_Base_SetConfig+0x114>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d027      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2c      	ldr	r2, [pc, #176]	; (8002530 <TIM_Base_SetConfig+0x118>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d023      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <TIM_Base_SetConfig+0x11c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <TIM_Base_SetConfig+0x120>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a29      	ldr	r2, [pc, #164]	; (800253c <TIM_Base_SetConfig+0x124>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <TIM_Base_SetConfig+0x128>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a27      	ldr	r2, [pc, #156]	; (8002544 <TIM_Base_SetConfig+0x12c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <TIM_Base_SetConfig+0x130>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <TIM_Base_SetConfig+0x134>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <TIM_Base_SetConfig+0x138>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <TIM_Base_SetConfig+0x13c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <TIM_Base_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0xf8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	615a      	str	r2, [r3, #20]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40010400 	.word	0x40010400
 8002540:	40014000 	.word	0x40014000
 8002544:	40014400 	.word	0x40014400
 8002548:	40014800 	.word	0x40014800
 800254c:	40001800 	.word	0x40001800
 8002550:	40001c00 	.word	0x40001c00
 8002554:	40002000 	.word	0x40002000

08002558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f023 0302 	bic.w	r3, r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <TIM_OC1_SetConfig+0xd8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_OC1_SetConfig+0x64>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <TIM_OC1_SetConfig+0xdc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10c      	bne.n	80025d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 0308 	bic.w	r3, r3, #8
 80025c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <TIM_OC1_SetConfig+0xd8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_OC1_SetConfig+0x8e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <TIM_OC1_SetConfig+0xdc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40010000 	.word	0x40010000
 8002634:	40010400 	.word	0x40010400

08002638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f023 0210 	bic.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0320 	bic.w	r3, r3, #32
 8002682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a22      	ldr	r2, [pc, #136]	; (800271c <TIM_OC2_SetConfig+0xe4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_OC2_SetConfig+0x68>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <TIM_OC2_SetConfig+0xe8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10d      	bne.n	80026bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <TIM_OC2_SetConfig+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_OC2_SetConfig+0x94>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <TIM_OC2_SetConfig+0xe8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d113      	bne.n	80026f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	621a      	str	r2, [r3, #32]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40010400 	.word	0x40010400

08002724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a21      	ldr	r2, [pc, #132]	; (8002804 <TIM_OC3_SetConfig+0xe0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_OC3_SetConfig+0x66>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a20      	ldr	r2, [pc, #128]	; (8002808 <TIM_OC3_SetConfig+0xe4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10d      	bne.n	80027a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <TIM_OC3_SetConfig+0xe0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_OC3_SetConfig+0x92>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <TIM_OC3_SetConfig+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d113      	bne.n	80027de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	621a      	str	r2, [r3, #32]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40010000 	.word	0x40010000
 8002808:	40010400 	.word	0x40010400

0800280c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	031b      	lsls	r3, r3, #12
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <TIM_OC4_SetConfig+0xa4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_OC4_SetConfig+0x68>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <TIM_OC4_SetConfig+0xa8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d109      	bne.n	8002888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40010400 	.word	0x40010400

080028b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 030a 	bic.w	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0210 	bic.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 0307 	orr.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2201      	movs	r2, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e05a      	b.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d01d      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d018      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00e      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10c      	bne.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	40000c00 	.word	0x40000c00
 8002b24:	40010400 	.word	0x40010400
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40001800 	.word	0x40001800

08002b30 <__libc_init_array>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4e0d      	ldr	r6, [pc, #52]	; (8002b68 <__libc_init_array+0x38>)
 8002b34:	4c0d      	ldr	r4, [pc, #52]	; (8002b6c <__libc_init_array+0x3c>)
 8002b36:	1ba4      	subs	r4, r4, r6
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	2500      	movs	r5, #0
 8002b3c:	42a5      	cmp	r5, r4
 8002b3e:	d109      	bne.n	8002b54 <__libc_init_array+0x24>
 8002b40:	4e0b      	ldr	r6, [pc, #44]	; (8002b70 <__libc_init_array+0x40>)
 8002b42:	4c0c      	ldr	r4, [pc, #48]	; (8002b74 <__libc_init_array+0x44>)
 8002b44:	f000 f820 	bl	8002b88 <_init>
 8002b48:	1ba4      	subs	r4, r4, r6
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	42a5      	cmp	r5, r4
 8002b50:	d105      	bne.n	8002b5e <__libc_init_array+0x2e>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b58:	4798      	blx	r3
 8002b5a:	3501      	adds	r5, #1
 8002b5c:	e7ee      	b.n	8002b3c <__libc_init_array+0xc>
 8002b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b62:	4798      	blx	r3
 8002b64:	3501      	adds	r5, #1
 8002b66:	e7f2      	b.n	8002b4e <__libc_init_array+0x1e>
 8002b68:	08002bb8 	.word	0x08002bb8
 8002b6c:	08002bb8 	.word	0x08002bb8
 8002b70:	08002bb8 	.word	0x08002bb8
 8002b74:	08002bbc 	.word	0x08002bbc

08002b78 <memset>:
 8002b78:	4402      	add	r2, r0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <memset+0xa>
 8002b80:	4770      	bx	lr
 8002b82:	f803 1b01 	strb.w	r1, [r3], #1
 8002b86:	e7f9      	b.n	8002b7c <memset+0x4>

08002b88 <_init>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr

08002b94 <_fini>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr
