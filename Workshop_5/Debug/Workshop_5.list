
Workshop_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a68  08004a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d65  00000000  00000000  0002f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021654  00000000  00000000  000327f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed27  00000000  00000000  00053e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3723  00000000  00000000  00062b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013628e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038e0  00000000  00000000  001362e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004894 	.word	0x08004894

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004894 	.word	0x08004894

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <getTemp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t getTemp(uint8_t i){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	return arrTX[i];
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <getTemp+0x1c>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20000028 	.word	0x20000028
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fe09 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f93b 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 fad9 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd2:	f000 fab7 	bl	8001244 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cd6:	f000 f99f 	bl	8001018 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cda:	f000 f9ef 	bl	80010bc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000cde:	f000 fa87 	bl	80011f0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000ce2:	f000 fa37 	bl	8001154 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000ce6:	4884      	ldr	r0, [pc, #528]	; (8000ef8 <main+0x238>)
 8000ce8:	f002 fdb4 	bl	8003854 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 8000cec:	4883      	ldr	r0, [pc, #524]	; (8000efc <main+0x23c>)
 8000cee:	f002 fdb1 	bl	8003854 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA (&hadc1, (uint32_t*) arr_adc, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4982      	ldr	r1, [pc, #520]	; (8000f00 <main+0x240>)
 8000cf6:	4883      	ldr	r0, [pc, #524]	; (8000f04 <main+0x244>)
 8000cf8:	f000 fea6 	bl	8001a48 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	T = 100 - 50*(((3.3*arr_adc[0])/4096)-0.02);
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <main+0x240>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbb3 	bl	800046c <__aeabi_i2d>
 8000d06:	a378      	add	r3, pc, #480	; (adr r3, 8000ee8 <main+0x228>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fc18 	bl	8000540 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4610      	mov	r0, r2
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	4b7a      	ldr	r3, [pc, #488]	; (8000f08 <main+0x248>)
 8000d1e:	f7ff fd39 	bl	8000794 <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	a371      	add	r3, pc, #452	; (adr r3, 8000ef0 <main+0x230>)
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f7ff fa4e 	bl	80001d0 <__aeabi_dsub>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	4b72      	ldr	r3, [pc, #456]	; (8000f0c <main+0x24c>)
 8000d42:	f7ff fbfd 	bl	8000540 <__aeabi_dmul>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	f04f 0000 	mov.w	r0, #0
 8000d4e:	4970      	ldr	r1, [pc, #448]	; (8000f10 <main+0x250>)
 8000d50:	f7ff fa3e 	bl	80001d0 <__aeabi_dsub>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe02 	bl	8000964 <__aeabi_d2uiz>
 8000d60:	4603      	mov	r3, r0
 8000d62:	80fb      	strh	r3, [r7, #6]
	arrTX[0] = 48 + T/10;
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	4a6b      	ldr	r2, [pc, #428]	; (8000f14 <main+0x254>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	3330      	adds	r3, #48	; 0x30
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <main+0x258>)
 8000d78:	701a      	strb	r2, [r3, #0]
	arrTX[1] = 48 + T%10;
 8000d7a:	88fa      	ldrh	r2, [r7, #6]
 8000d7c:	4b65      	ldr	r3, [pc, #404]	; (8000f14 <main+0x254>)
 8000d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d82:	08d9      	lsrs	r1, r3, #3
 8000d84:	460b      	mov	r3, r1
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3330      	adds	r3, #48	; 0x30
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <main+0x258>)
 8000d98:	705a      	strb	r2, [r3, #1]
	uint8_t buffRX[1];
	HAL_StatusTypeDef varRX;

	varRX =	HAL_UART_Receive (&huart3, (uint8_t *) buffRX, 1, 10);
 8000d9a:	1d39      	adds	r1, r7, #4
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	2201      	movs	r2, #1
 8000da0:	485e      	ldr	r0, [pc, #376]	; (8000f1c <main+0x25c>)
 8000da2:	f003 fa72 	bl	800428a <HAL_UART_Receive>
 8000da6:	4603      	mov	r3, r0
 8000da8:	717b      	strb	r3, [r7, #5]

	if (varRX == HAL_OK){
 8000daa:	797b      	ldrb	r3, [r7, #5]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f040 8097 	bne.w	8000ee0 <main+0x220>
		switch (buffRX[0]){
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	3b31      	subs	r3, #49	; 0x31
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d8a0      	bhi.n	8000cfc <main+0x3c>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <main+0x100>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000dd1 	.word	0x08000dd1
 8000dc4:	08000e15 	.word	0x08000e15
 8000dc8:	08000e59 	.word	0x08000e59
 8000dcc:	08000e9d 	.word	0x08000e9d
		case 49:
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	4852      	ldr	r0, [pc, #328]	; (8000f20 <main+0x260>)
 8000dd6:	f002 f823 	bl	8002e20 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10c      	bne.n	8000dfa <main+0x13a>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de6:	484e      	ldr	r0, [pc, #312]	; (8000f20 <main+0x260>)
 8000de8:	f002 f832 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Green LED is on\r\n", 14+2, 10);
 8000dec:	230a      	movs	r3, #10
 8000dee:	2210      	movs	r2, #16
 8000df0:	494c      	ldr	r1, [pc, #304]	; (8000f24 <main+0x264>)
 8000df2:	484a      	ldr	r0, [pc, #296]	; (8000f1c <main+0x25c>)
 8000df4:	f003 f9b7 	bl	8004166 <HAL_UART_Transmit>
			}
			else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
				HAL_UART_Transmit (&huart3, (uint8_t *) "Green LED is off\r\n", 15+2, 10);
			}
			break;
 8000df8:	e073      	b.n	8000ee2 <main+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e00:	4847      	ldr	r0, [pc, #284]	; (8000f20 <main+0x260>)
 8000e02:	f002 f825 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Green LED is off\r\n", 15+2, 10);
 8000e06:	230a      	movs	r3, #10
 8000e08:	2211      	movs	r2, #17
 8000e0a:	4947      	ldr	r1, [pc, #284]	; (8000f28 <main+0x268>)
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <main+0x25c>)
 8000e0e:	f003 f9aa 	bl	8004166 <HAL_UART_Transmit>
			break;
 8000e12:	e066      	b.n	8000ee2 <main+0x222>
		case 50:
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e18:	4841      	ldr	r0, [pc, #260]	; (8000f20 <main+0x260>)
 8000e1a:	f002 f801 	bl	8002e20 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <main+0x17e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	483d      	ldr	r0, [pc, #244]	; (8000f20 <main+0x260>)
 8000e2c:	f002 f810 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Orange LED is on\r\n", 15+2, 10);
 8000e30:	230a      	movs	r3, #10
 8000e32:	2211      	movs	r2, #17
 8000e34:	493d      	ldr	r1, [pc, #244]	; (8000f2c <main+0x26c>)
 8000e36:	4839      	ldr	r0, [pc, #228]	; (8000f1c <main+0x25c>)
 8000e38:	f003 f995 	bl	8004166 <HAL_UART_Transmit>
			}
			else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
				HAL_UART_Transmit (&huart3, (uint8_t *) "Orange LED is off\r\n", 16+2, 10);
			}
			break;
 8000e3c:	e051      	b.n	8000ee2 <main+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e44:	4836      	ldr	r0, [pc, #216]	; (8000f20 <main+0x260>)
 8000e46:	f002 f803 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Orange LED is off\r\n", 16+2, 10);
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	2212      	movs	r2, #18
 8000e4e:	4938      	ldr	r1, [pc, #224]	; (8000f30 <main+0x270>)
 8000e50:	4832      	ldr	r0, [pc, #200]	; (8000f1c <main+0x25c>)
 8000e52:	f003 f988 	bl	8004166 <HAL_UART_Transmit>
			break;
 8000e56:	e044      	b.n	8000ee2 <main+0x222>
		case 51:
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8000e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5c:	4830      	ldr	r0, [pc, #192]	; (8000f20 <main+0x260>)
 8000e5e:	f001 ffdf 	bl	8002e20 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10c      	bne.n	8000e82 <main+0x1c2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6e:	482c      	ldr	r0, [pc, #176]	; (8000f20 <main+0x260>)
 8000e70:	f001 ffee 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Red LED is on\r\n", 12+2, 10);
 8000e74:	230a      	movs	r3, #10
 8000e76:	220e      	movs	r2, #14
 8000e78:	492e      	ldr	r1, [pc, #184]	; (8000f34 <main+0x274>)
 8000e7a:	4828      	ldr	r0, [pc, #160]	; (8000f1c <main+0x25c>)
 8000e7c:	f003 f973 	bl	8004166 <HAL_UART_Transmit>
			}
			else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
				HAL_UART_Transmit (&huart3, (uint8_t *) "Red LED is off\r\n", 13+2, 10);
			}
			break;
 8000e80:	e02f      	b.n	8000ee2 <main+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e88:	4825      	ldr	r0, [pc, #148]	; (8000f20 <main+0x260>)
 8000e8a:	f001 ffe1 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Red LED is off\r\n", 13+2, 10);
 8000e8e:	230a      	movs	r3, #10
 8000e90:	220f      	movs	r2, #15
 8000e92:	4929      	ldr	r1, [pc, #164]	; (8000f38 <main+0x278>)
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <main+0x25c>)
 8000e96:	f003 f966 	bl	8004166 <HAL_UART_Transmit>
			break;
 8000e9a:	e022      	b.n	8000ee2 <main+0x222>
		case 52:
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8000e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <main+0x260>)
 8000ea2:	f001 ffbd 	bl	8002e20 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10c      	bne.n	8000ec6 <main+0x206>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <main+0x260>)
 8000eb4:	f001 ffcc 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Blue LED is on\r\n", 13+2, 10);
 8000eb8:	230a      	movs	r3, #10
 8000eba:	220f      	movs	r2, #15
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <main+0x27c>)
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <main+0x25c>)
 8000ec0:	f003 f951 	bl	8004166 <HAL_UART_Transmit>
			}
			else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
				HAL_UART_Transmit (&huart3, (uint8_t *) "Blue LED is off\r\n", 14+2, 10);
			}
			break;
 8000ec4:	e00d      	b.n	8000ee2 <main+0x222>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <main+0x260>)
 8000ece:	f001 ffbf 	bl	8002e50 <HAL_GPIO_WritePin>
				HAL_UART_Transmit (&huart3, (uint8_t *) "Blue LED is off\r\n", 14+2, 10);
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	491a      	ldr	r1, [pc, #104]	; (8000f40 <main+0x280>)
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <main+0x25c>)
 8000eda:	f003 f944 	bl	8004166 <HAL_UART_Transmit>
			break;
 8000ede:	e000      	b.n	8000ee2 <main+0x222>
		}

	}
 8000ee0:	bf00      	nop
  {
 8000ee2:	e70b      	b.n	8000cfc <main+0x3c>
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	66666666 	.word	0x66666666
 8000eec:	400a6666 	.word	0x400a6666
 8000ef0:	47ae147b 	.word	0x47ae147b
 8000ef4:	3f947ae1 	.word	0x3f947ae1
 8000ef8:	20000160 	.word	0x20000160
 8000efc:	20000070 	.word	0x20000070
 8000f00:	200001a8 	.word	0x200001a8
 8000f04:	200000b8 	.word	0x200000b8
 8000f08:	40b00000 	.word	0x40b00000
 8000f0c:	40490000 	.word	0x40490000
 8000f10:	40590000 	.word	0x40590000
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	20000028 	.word	0x20000028
 8000f1c:	2000002c 	.word	0x2000002c
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	080048ac 	.word	0x080048ac
 8000f28:	080048c0 	.word	0x080048c0
 8000f2c:	080048d4 	.word	0x080048d4
 8000f30:	080048e8 	.word	0x080048e8
 8000f34:	080048fc 	.word	0x080048fc
 8000f38:	0800490c 	.word	0x0800490c
 8000f3c:	08004920 	.word	0x08004920
 8000f40:	08004934 	.word	0x08004934

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fc96 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb8:	23a8      	movs	r3, #168	; 0xa8
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 ff7f 	bl	8002ecc <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd4:	f000 f9e4 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 f9e0 	bl	80033bc <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001002:	f000 f9cd 	bl	80013a0 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <MX_ADC1_Init+0xa0>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001036:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001040:	2201      	movs	r2, #1
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001046:	2200      	movs	r2, #0
 8001048:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800105c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800106a:	2201      	movs	r2, #1
 800106c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC1_Init+0x9c>)
 8001078:	2201      	movs	r2, #1
 800107a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800107e:	f000 fc9f 	bl	80019c0 <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001088:	f000 f98a 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800108c:	2309      	movs	r3, #9
 800108e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800109e:	f000 fe01 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010a8:	f000 f97a 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000b8 	.word	0x200000b8
 80010b8:	40012000 	.word	0x40012000

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_TIM2_Init+0x94>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_TIM2_Init+0x94>)
 80010e2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80010e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_TIM2_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM2_Init+0x94>)
 80010f0:	2263      	movs	r2, #99	; 0x63
 80010f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_TIM2_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM2_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM2_Init+0x94>)
 8001102:	f002 fb57 	bl	80037b4 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800110c:	f000 f948 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_TIM2_Init+0x94>)
 800111e:	f002 fd11 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 f93a 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112c:	2320      	movs	r3, #32
 800112e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM2_Init+0x94>)
 800113a:	f002 ff37 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f92c 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000160 	.word	0x20000160

08001154 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM3_Init+0x94>)
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_TIM3_Init+0x98>)
 8001174:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM3_Init+0x94>)
 8001178:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800117c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM3_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_TIM3_Init+0x94>)
 8001186:	f241 3287 	movw	r2, #4999	; 0x1387
 800118a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_TIM3_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_TIM3_Init+0x94>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_TIM3_Init+0x94>)
 800119a:	f002 fb0b 	bl	80037b4 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011a4:	f000 f8fc 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_TIM3_Init+0x94>)
 80011b6:	f002 fcc5 	bl	8003b44 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011c0:	f000 f8ee 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_TIM3_Init+0x94>)
 80011d2:	f002 feeb 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f8e0 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000070 	.word	0x20000070
 80011ec:	40000400 	.word	0x40000400

080011f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART3_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART3_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART3_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART3_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART3_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART3_UART_Init+0x4c>)
 8001228:	f002 ff50 	bl	80040cc <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f8b5 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000002c 	.word	0x2000002c
 8001240:	40004800 	.word	0x40004800

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_DMA_Init+0x3c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <MX_DMA_Init+0x3c>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_DMA_Init+0x3c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2038      	movs	r0, #56	; 0x38
 800126c:	f001 f895 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001270:	2038      	movs	r0, #56	; 0x38
 8001272:	f001 f8ae 	bl	80023d2 <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <MX_GPIO_Init+0x110>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a3c      	ldr	r2, [pc, #240]	; (8001394 <MX_GPIO_Init+0x110>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <MX_GPIO_Init+0x110>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b36      	ldr	r3, [pc, #216]	; (8001394 <MX_GPIO_Init+0x110>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a35      	ldr	r2, [pc, #212]	; (8001394 <MX_GPIO_Init+0x110>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <MX_GPIO_Init+0x110>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <MX_GPIO_Init+0x110>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <MX_GPIO_Init+0x110>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MX_GPIO_Init+0x110>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <MX_GPIO_Init+0x110>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <MX_GPIO_Init+0x110>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MX_GPIO_Init+0x110>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_GPIO_Init+0x110>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <MX_GPIO_Init+0x110>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_GPIO_Init+0x110>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <MX_GPIO_Init+0x114>)
 800132e:	f001 fd8f 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001332:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4813      	ldr	r0, [pc, #76]	; (8001398 <MX_GPIO_Init+0x114>)
 800134c:	f001 fbcc 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001350:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_GPIO_Init+0x118>)
 8001368:	f001 fbbe 	bl	8002ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2017      	movs	r0, #23
 8001372:	f001 f812 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001376:	2017      	movs	r0, #23
 8001378:	f001 f82b 	bl	80023d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2028      	movs	r0, #40	; 0x28
 8001382:	f001 f80a 	bl	800239a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f001 f823 	bl	80023d2 <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40020800 	.word	0x40020800

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <HAL_ADC_MspInit+0xdc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d157      	bne.n	80014d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_ADC_MspInit+0xe0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	481d      	ldr	r0, [pc, #116]	; (80014e4 <HAL_ADC_MspInit+0xe4>)
 800146e:	f001 fb3b 	bl	8002ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_ADC_MspInit+0xec>)
 8001476:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 800148c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001490:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 8001494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001498:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 800149c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014b8:	f000 ffa6 	bl	8002408 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80014c2:	f7ff ff6d 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_ADC_MspInit+0xe8>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012000 	.word	0x40012000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400
 80014e8:	20000100 	.word	0x20000100
 80014ec:	40026410 	.word	0x40026410

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d10e      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800151e:	e01a      	b.n	8001556 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_TIM_Base_MspInit+0x74>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d115      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_TIM_Base_MspInit+0x70>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201d      	movs	r0, #29
 800154c:	f000 ff25 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001550:	201d      	movs	r0, #29
 8001552:	f000 ff3e 	bl	80023d2 <HAL_NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40000400 	.word	0x40000400

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12c      	bne.n	80015e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0x88>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d4:	2307      	movs	r3, #7
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 80015e0:	f001 fa82 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004800 	.word	0x40004800
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f998 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	4843      	ldr	r0, [pc, #268]	; (800176c <EXTI9_5_IRQHandler+0x118>)
 800165e:	f001 fbdf 	bl	8002e20 <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d121      	bne.n	80016ac <EXTI9_5_IRQHandler+0x58>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8001668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166c:	4840      	ldr	r0, [pc, #256]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 800166e:	f001 fbd7 	bl	8002e20 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <EXTI9_5_IRQHandler+0x3e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167e:	483c      	ldr	r0, [pc, #240]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 8001680:	f001 fbe6 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Green LED is on by SWT5\r\n", 22+2, 10);
 8001684:	230a      	movs	r3, #10
 8001686:	2218      	movs	r2, #24
 8001688:	493a      	ldr	r1, [pc, #232]	; (8001774 <EXTI9_5_IRQHandler+0x120>)
 800168a:	483b      	ldr	r0, [pc, #236]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 800168c:	f002 fd6b 	bl	8004166 <HAL_UART_Transmit>
 8001690:	e05e      	b.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001698:	4835      	ldr	r0, [pc, #212]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 800169a:	f001 fbd9 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Green LED is off by SWT5\r\n", 23+2, 10);
 800169e:	230a      	movs	r3, #10
 80016a0:	2219      	movs	r2, #25
 80016a2:	4936      	ldr	r1, [pc, #216]	; (800177c <EXTI9_5_IRQHandler+0x128>)
 80016a4:	4834      	ldr	r0, [pc, #208]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 80016a6:	f002 fd5e 	bl	8004166 <HAL_UART_Transmit>
 80016aa:	e051      	b.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		}
	  }
	  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	482e      	ldr	r0, [pc, #184]	; (800176c <EXTI9_5_IRQHandler+0x118>)
 80016b2:	f001 fbb5 	bl	8002e20 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d121      	bne.n	8001700 <EXTI9_5_IRQHandler+0xac>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80016bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c0:	482b      	ldr	r0, [pc, #172]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 80016c2:	f001 fbad 	bl	8002e20 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10c      	bne.n	80016e6 <EXTI9_5_IRQHandler+0x92>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4827      	ldr	r0, [pc, #156]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 80016d4:	f001 fbbc 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Orange LED is on by SWT3\r\n", 23+2, 10);
 80016d8:	230a      	movs	r3, #10
 80016da:	2219      	movs	r2, #25
 80016dc:	4928      	ldr	r1, [pc, #160]	; (8001780 <EXTI9_5_IRQHandler+0x12c>)
 80016de:	4826      	ldr	r0, [pc, #152]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 80016e0:	f002 fd41 	bl	8004166 <HAL_UART_Transmit>
 80016e4:	e034      	b.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4820      	ldr	r0, [pc, #128]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 80016ee:	f001 fbaf 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Orange LED is off by SWT3\r\n", 24+2, 10);
 80016f2:	230a      	movs	r3, #10
 80016f4:	221a      	movs	r2, #26
 80016f6:	4923      	ldr	r1, [pc, #140]	; (8001784 <EXTI9_5_IRQHandler+0x130>)
 80016f8:	481f      	ldr	r0, [pc, #124]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 80016fa:	f002 fd34 	bl	8004166 <HAL_UART_Transmit>
 80016fe:	e027      	b.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		}
	  }
	  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	481a      	ldr	r0, [pc, #104]	; (800176c <EXTI9_5_IRQHandler+0x118>)
 8001704:	f001 fb8c 	bl	8002e20 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d120      	bne.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 8001714:	f001 fb84 	bl	8002e20 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <EXTI9_5_IRQHandler+0xe4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 8001726:	f001 fb93 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Red LED is on by SWT4\r\n", 20+2, 10);
 800172a:	230a      	movs	r3, #10
 800172c:	2216      	movs	r2, #22
 800172e:	4916      	ldr	r1, [pc, #88]	; (8001788 <EXTI9_5_IRQHandler+0x134>)
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 8001732:	f002 fd18 	bl	8004166 <HAL_UART_Transmit>
 8001736:	e00b      	b.n	8001750 <EXTI9_5_IRQHandler+0xfc>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <EXTI9_5_IRQHandler+0x11c>)
 8001740:	f001 fb86 	bl	8002e50 <HAL_GPIO_WritePin>
			HAL_UART_Transmit (&huart3, (uint8_t *) "Red LED is off by SWT4\r\n", 21+2, 10);
 8001744:	230a      	movs	r3, #10
 8001746:	2217      	movs	r2, #23
 8001748:	4910      	ldr	r1, [pc, #64]	; (800178c <EXTI9_5_IRQHandler+0x138>)
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <EXTI9_5_IRQHandler+0x124>)
 800174c:	f002 fd0b 	bl	8004166 <HAL_UART_Transmit>
		}
	  }

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001750:	2040      	movs	r0, #64	; 0x40
 8001752:	f001 fb97 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001756:	f44f 7080 	mov.w	r0, #256	; 0x100
 800175a:	f001 fb93 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800175e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001762:	f001 fb8f 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	08004948 	.word	0x08004948
 8001778:	2000002c 	.word	0x2000002c
 800177c:	08004964 	.word	0x08004964
 8001780:	08004980 	.word	0x08004980
 8001784:	0800499c 	.word	0x0800499c
 8001788:	080049b8 	.word	0x080049b8
 800178c:	080049d0 	.word	0x080049d0

08001790 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  uint8_t buffTX[2] = {getTemp(0), getTemp(1)};
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fa80 	bl	8000c9c <getTemp>
 800179c:	4603      	mov	r3, r0
 800179e:	713b      	strb	r3, [r7, #4]
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fa7b 	bl	8000c9c <getTemp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	717b      	strb	r3, [r7, #5]
  HAL_UART_Transmit (&huart3, (uint8_t *) "Temperature is ", 15, 10);
 80017aa:	230a      	movs	r3, #10
 80017ac:	220f      	movs	r2, #15
 80017ae:	490b      	ldr	r1, [pc, #44]	; (80017dc <TIM3_IRQHandler+0x4c>)
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <TIM3_IRQHandler+0x50>)
 80017b2:	f002 fcd8 	bl	8004166 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart3, (uint8_t *) buffTX, 2, 10);
 80017b6:	1d39      	adds	r1, r7, #4
 80017b8:	230a      	movs	r3, #10
 80017ba:	2202      	movs	r2, #2
 80017bc:	4808      	ldr	r0, [pc, #32]	; (80017e0 <TIM3_IRQHandler+0x50>)
 80017be:	f002 fcd2 	bl	8004166 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart3, (uint8_t *) " C      \n\r", 8+2, 10);
 80017c2:	230a      	movs	r3, #10
 80017c4:	220a      	movs	r2, #10
 80017c6:	4907      	ldr	r1, [pc, #28]	; (80017e4 <TIM3_IRQHandler+0x54>)
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <TIM3_IRQHandler+0x50>)
 80017ca:	f002 fccc 	bl	8004166 <HAL_UART_Transmit>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <TIM3_IRQHandler+0x58>)
 80017d0:	f002 f8b0 	bl	8003934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080049ec 	.word	0x080049ec
 80017e0:	2000002c 	.word	0x2000002c
 80017e4:	080049fc 	.word	0x080049fc
 80017e8:	20000070 	.word	0x20000070

080017ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_RESET) {
 80017f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <EXTI15_10_IRQHandler+0x54>)
 80017f6:	f001 fb13 	bl	8002e20 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <EXTI15_10_IRQHandler+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <EXTI15_10_IRQHandler+0x54>)
 8001808:	f001 fb22 	bl	8002e50 <HAL_GPIO_WritePin>
		HAL_UART_Transmit (&huart3, (uint8_t *) "Blue LED is on by SWT1\r\n", 21+2, 10);
 800180c:	230a      	movs	r3, #10
 800180e:	2217      	movs	r2, #23
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <EXTI15_10_IRQHandler+0x58>)
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <EXTI15_10_IRQHandler+0x5c>)
 8001814:	f002 fca7 	bl	8004166 <HAL_UART_Transmit>
 8001818:	e00b      	b.n	8001832 <EXTI15_10_IRQHandler+0x46>
	}
	else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <EXTI15_10_IRQHandler+0x54>)
 8001822:	f001 fb15 	bl	8002e50 <HAL_GPIO_WritePin>
		HAL_UART_Transmit (&huart3, (uint8_t *) "Blue LED is off by SWT1\r\n", 22+2, 10);
 8001826:	230a      	movs	r3, #10
 8001828:	2218      	movs	r2, #24
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <EXTI15_10_IRQHandler+0x60>)
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <EXTI15_10_IRQHandler+0x5c>)
 800182e:	f002 fc9a 	bl	8004166 <HAL_UART_Transmit>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001832:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001836:	f001 fb25 	bl	8002e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020c00 	.word	0x40020c00
 8001844:	08004a08 	.word	0x08004a08
 8001848:	2000002c 	.word	0x2000002c
 800184c:	08004a24 	.word	0x08004a24

08001850 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA2_Stream0_IRQHandler+0x10>)
 8001856:	f000 fedd 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000100 	.word	0x20000100

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b2:	f7ff ffd7 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f002 ffc1 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fa01 	bl	8000cc0 <main>
  bx  lr    
 80018be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018cc:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 80018d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018d4:	200001b0 	.word	0x200001b0

080018d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_Init+0x40>)
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_Init+0x40>)
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x40>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 fd3d 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fd4e 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd55 	bl	80023ee <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f000 fd1d 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000000 	.word	0x20000000
 8001978:	20000008 	.word	0x20000008
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008
 80019a4:	200001ac 	.word	0x200001ac

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200001ac 	.word	0x200001ac

080019c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e033      	b.n	8001a3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fd0e 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a06:	f023 0302 	bic.w	r3, r3, #2
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa68 	bl	8001ee8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2e:	e001      	b.n	8001a34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Start_DMA+0x1e>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e0e9      	b.n	8001c3a <HAL_ADC_Start_DMA+0x1f2>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d018      	beq.n	8001aae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_ADC_Start_DMA+0x1fc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6d      	ldr	r2, [pc, #436]	; (8001c48 <HAL_ADC_Start_DMA+0x200>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0c9a      	lsrs	r2, r3, #18
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d107      	bne.n	8001ace <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	f040 80a1 	bne.w	8001c20 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1c:	d106      	bne.n	8001b2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f023 0206 	bic.w	r2, r3, #6
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
 8001b2a:	e002      	b.n	8001b32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_ADC_Start_DMA+0x204>)
 8001b3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	4a43      	ldr	r2, [pc, #268]	; (8001c50 <HAL_ADC_Start_DMA+0x208>)
 8001b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	4a42      	ldr	r2, [pc, #264]	; (8001c54 <HAL_ADC_Start_DMA+0x20c>)
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	4a41      	ldr	r2, [pc, #260]	; (8001c58 <HAL_ADC_Start_DMA+0x210>)
 8001b54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	334c      	adds	r3, #76	; 0x4c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f000 fce8 	bl	8002564 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12a      	bne.n	8001bf6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2d      	ldr	r2, [pc, #180]	; (8001c5c <HAL_ADC_Start_DMA+0x214>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d015      	beq.n	8001bd6 <HAL_ADC_Start_DMA+0x18e>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_ADC_Start_DMA+0x218>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_Start_DMA+0x178>
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_ADC_Start_DMA+0x204>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_ADC_Start_DMA+0x21c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d136      	bne.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_ADC_Start_DMA+0x204>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d130      	bne.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d129      	bne.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e020      	b.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_ADC_Start_DMA+0x214>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d11b      	bne.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d114      	bne.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	e00b      	b.n	8001c38 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	080020e1 	.word	0x080020e1
 8001c54:	0800219b 	.word	0x0800219b
 8001c58:	080021b7 	.word	0x080021b7
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40012100 	.word	0x40012100
 8001c64:	40012200 	.word	0x40012200

08001c68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1c>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e105      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x228>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	d925      	bls.n	8001d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68d9      	ldr	r1, [r3, #12]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b1e      	subs	r3, #30
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43da      	mvns	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	4603      	mov	r3, r0
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4403      	add	r3, r0
 8001d0e:	3b1e      	subs	r3, #30
 8001d10:	409a      	lsls	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	e022      	b.n	8001d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	2207      	movs	r2, #7
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6919      	ldr	r1, [r3, #16]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4403      	add	r3, r0
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d824      	bhi.n	8001db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b05      	subs	r3, #5
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b05      	subs	r3, #5
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
 8001db2:	e04c      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d824      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b23      	subs	r3, #35	; 0x23
 8001dce:	221f      	movs	r2, #31
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	400a      	ands	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b23      	subs	r3, #35	; 0x23
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
 8001e04:	e023      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b41      	subs	r3, #65	; 0x41
 8001e18:	221f      	movs	r2, #31
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b41      	subs	r3, #65	; 0x41
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <HAL_ADC_ConfigChannel+0x234>)
 8001e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <HAL_ADC_ConfigChannel+0x238>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1cc>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b12      	cmp	r3, #18
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_ADC_ConfigChannel+0x238>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d123      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x21e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d003      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0x1e6>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b11      	cmp	r3, #17
 8001e88:	d11b      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d111      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_ADC_ConfigChannel+0x23c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_ADC_ConfigChannel+0x240>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9a      	lsrs	r2, r3, #18
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40012300 	.word	0x40012300
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef0:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <ADC_Init+0x1f0>)
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	021a      	lsls	r2, r3, #8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	4a58      	ldr	r2, [pc, #352]	; (80020dc <ADC_Init+0x1f4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6899      	ldr	r1, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	e00f      	b.n	8001fe6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0202 	bic.w	r2, r2, #2
 8001ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
 8002000:	005a      	lsls	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002022:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002032:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6859      	ldr	r1, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	3b01      	subs	r3, #1
 8002040:	035a      	lsls	r2, r3, #13
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	e007      	b.n	800205c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	3b01      	subs	r3, #1
 8002078:	051a      	lsls	r2, r3, #20
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800209e:	025a      	lsls	r2, r3, #9
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	029a      	lsls	r2, r3, #10
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40012300 	.word	0x40012300
 80020dc:	0f000001 	.word	0x0f000001

080020e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d13c      	bne.n	8002174 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d12b      	bne.n	800216c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d127      	bne.n	800216c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002134:	2b00      	cmp	r3, #0
 8002136:	d119      	bne.n	800216c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0220 	bic.w	r2, r2, #32
 8002146:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fd7b 	bl	8001c68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002172:	e00e      	b.n	8002192 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fd85 	bl	8001c90 <HAL_ADC_ErrorCallback>
}
 8002186:	e004      	b.n	8002192 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fd67 	bl	8001c7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f043 0204 	orr.w	r2, r3, #4
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff fd5a 	bl	8001c90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff29 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff3e 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff31 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff fac8 	bl	80019a8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e099      	b.n	8002558 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e00f      	b.n	8002466 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff faaf 	bl	80019a8 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d908      	bls.n	8002466 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e078      	b.n	8002558 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e8      	bne.n	8002446 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_DMA_Init+0x158>)
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d107      	bne.n	80024d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4313      	orrs	r3, r2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0307 	bic.w	r3, r3, #7
 80024e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d117      	bne.n	800252a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fa6f 	bl	80029f0 <DMA_CheckFifoParam>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002526:	2301      	movs	r3, #1
 8002528:	e016      	b.n	8002558 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa26 	bl	8002984 <DMA_CalcBaseAndBitshift>
 8002538:	4603      	mov	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	223f      	movs	r2, #63	; 0x3f
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	f010803f 	.word	0xf010803f

08002564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_DMA_Start_IT+0x26>
 8002586:	2302      	movs	r3, #2
 8002588:	e040      	b.n	800260c <HAL_DMA_Start_IT+0xa8>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12f      	bne.n	80025fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f9b8 	bl	8002928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0216 	orr.w	r2, r2, #22
 80025d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e005      	b.n	800260a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800260a:	7dfb      	ldrb	r3, [r7, #23]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002620:	4b92      	ldr	r3, [pc, #584]	; (800286c <HAL_DMA_IRQHandler+0x258>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_DMA_IRQHandler+0x25c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2208      	movs	r2, #8
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2208      	movs	r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2201      	movs	r2, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2204      	movs	r2, #4
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2204      	movs	r2, #4
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2210      	movs	r2, #16
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d043      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2210      	movs	r2, #16
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e01f      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e016      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0208 	bic.w	r2, r2, #8
 8002772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2220      	movs	r2, #32
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 808e 	beq.w	80028b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8086 	beq.w	80028b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2220      	movs	r2, #32
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d136      	bne.n	800282c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0216 	bic.w	r2, r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_DMA_IRQHandler+0x1da>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0208 	bic.w	r2, r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d07d      	beq.n	800291e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
        }
        return;
 800282a:	e078      	b.n	800291e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01c      	beq.n	8002874 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	2b00      	cmp	r3, #0
 800284e:	d030      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e02b      	b.n	80028b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e022      	b.n	80028b2 <HAL_DMA_IRQHandler+0x29e>
 800286c:	20000000 	.word	0x20000000
 8002870:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d032      	beq.n	8002920 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d022      	beq.n	800290c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d307      	bcc.n	80028fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f2      	bne.n	80028de <HAL_DMA_IRQHandler+0x2ca>
 80028f8:	e000      	b.n	80028fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
 800291c:	e000      	b.n	8002920 <HAL_DMA_IRQHandler+0x30c>
        return;
 800291e:	bf00      	nop
    }
  }
}
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop

08002928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d108      	bne.n	8002968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002966:	e007      	b.n	8002978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3b10      	subs	r3, #16
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <DMA_CalcBaseAndBitshift+0x68>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d909      	bls.n	80029c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58
 80029c4:	e007      	b.n	80029d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	aaaaaaab 	.word	0xaaaaaaab
 80029ec:	08004a58 	.word	0x08004a58

080029f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <DMA_CheckFifoParam+0x5a>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d856      	bhi.n	8002abe <DMA_CheckFifoParam+0xce>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <DMA_CheckFifoParam+0x28>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a3b 	.word	0x08002a3b
 8002a20:	08002a29 	.word	0x08002a29
 8002a24:	08002abf 	.word	0x08002abf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d046      	beq.n	8002ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e043      	b.n	8002ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a42:	d140      	bne.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e03d      	b.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	d121      	bne.n	8002a98 <DMA_CheckFifoParam+0xa8>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d837      	bhi.n	8002aca <DMA_CheckFifoParam+0xda>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <DMA_CheckFifoParam+0x70>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a77 	.word	0x08002a77
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002a89 	.word	0x08002a89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e030      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d025      	beq.n	8002ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e022      	b.n	8002ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a96:	e01c      	b.n	8002ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d903      	bls.n	8002aa6 <DMA_CheckFifoParam+0xb6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa4:	e018      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aaa:	e015      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e00b      	b.n	8002ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e00a      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e008      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e006      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e004      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e16b      	b.n	8002ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 815a 	bne.w	8002dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80b4 	beq.w	8002dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a5f      	ldr	r2, [pc, #380]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_GPIO_Init+0x314>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_GPIO_Init+0x318>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <HAL_GPIO_Init+0x320>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_GPIO_Init+0x328>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x32c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x330>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00e      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00c      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e00a      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d52:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f ae90 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021c00 	.word	0x40021c00
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e001      	b.n	8002e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f806 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e264      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d075      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	4ba3      	ldr	r3, [pc, #652]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b9d      	ldr	r3, [pc, #628]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b99      	ldr	r3, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x108>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e23f      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x74>
 8002f32:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a90      	ldr	r2, [pc, #576]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a8a      	ldr	r2, [pc, #552]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a83      	ldr	r2, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fd10 	bl	80019a8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd0c 	bl	80019a8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e204      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xc0>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fcfc 	bl	80019a8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fcf8 	bl	80019a8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1f0      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xe8>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c4      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4952      	ldr	r1, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x2b0>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe fcb1 	bl	80019a8 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe fcad 	bl	80019a8 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a5      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4940      	ldr	r1, [pc, #256]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x2b0>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fc90 	bl	80019a8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fc8c 	bl	80019a8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e184      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCC_OscConfig+0x2b4>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe fc70 	bl	80019a8 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fc6c 	bl	80019a8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e164      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x200>
 80030ea:	e015      	b.n	8003118 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x2b4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fc59 	bl	80019a8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fc55 	bl	80019a8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e14d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d121      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fe fc1b 	bl	80019a8 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e011      	b.n	800319a <HAL_RCC_OscConfig+0x2ce>
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
 8003184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe fc0e 	bl	80019a8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e106      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x4e4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x2f0>
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a80      	ldr	r2, [pc, #512]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x32a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x312>
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	4b78      	ldr	r3, [pc, #480]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x32a>
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a74      	ldr	r2, [pc, #464]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a71      	ldr	r2, [pc, #452]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe fbd3 	bl	80019a8 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fbcf 	bl	80019a8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0c5      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x33a>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fbbd 	bl	80019a8 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fbb9 	bl	80019a8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0af      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a55      	ldr	r2, [pc, #340]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 809b 	beq.w	80033a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d05c      	beq.n	8003336 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d141      	bne.n	8003308 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fb8d 	bl	80019a8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fb89 	bl	80019a8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e081      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb62 	bl	80019a8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fb5e 	bl	80019a8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e056      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x41c>
 8003306:	e04e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe fb4b 	bl	80019a8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fe fb47 	bl	80019a8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03f      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x44a>
 8003334:	e037      	b.n	80033a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e032      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d028      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d121      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d11a      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003372:	4013      	ands	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003378:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40007000 	.word	0x40007000
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470060 	.word	0x42470060

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cc      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90c      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e067      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4934      	ldr	r1, [pc, #208]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fa7c 	bl	80019a8 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe fa78 	bl	80019a8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e04f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe f9dc 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	08004a40 	.word	0x08004a40
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	2300      	movs	r3, #0
 800359a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a0:	4b67      	ldr	r3, [pc, #412]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d00d      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x40>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	f200 80bd 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x1a4>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x34>
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ba:	e0b7      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b61      	ldr	r3, [pc, #388]	; (8003744 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035be:	60bb      	str	r3, [r7, #8]
       break;
 80035c0:	e0b7      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035c4:	60bb      	str	r3, [r7, #8]
      break;
 80035c6:	e0b4      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c8:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d04d      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	461a      	mov	r2, r3
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	ea02 0800 	and.w	r8, r2, r0
 80035f6:	ea03 0901 	and.w	r9, r3, r1
 80035fa:	4640      	mov	r0, r8
 80035fc:	4649      	mov	r1, r9
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	014b      	lsls	r3, r1, #5
 8003608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800360c:	0142      	lsls	r2, r0, #5
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	ebb0 0008 	subs.w	r0, r0, r8
 8003616:	eb61 0109 	sbc.w	r1, r1, r9
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	018b      	lsls	r3, r1, #6
 8003624:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003628:	0182      	lsls	r2, r0, #6
 800362a:	1a12      	subs	r2, r2, r0
 800362c:	eb63 0301 	sbc.w	r3, r3, r1
 8003630:	f04f 0000 	mov.w	r0, #0
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	00d9      	lsls	r1, r3, #3
 800363a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800363e:	00d0      	lsls	r0, r2, #3
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	eb12 0208 	adds.w	r2, r2, r8
 8003648:	eb43 0309 	adc.w	r3, r3, r9
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	0259      	lsls	r1, r3, #9
 8003656:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800365a:	0250      	lsls	r0, r2, #9
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f7fd f99a 	bl	80009a4 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e04a      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	461a      	mov	r2, r3
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	ea02 0400 	and.w	r4, r2, r0
 8003692:	ea03 0501 	and.w	r5, r3, r1
 8003696:	4620      	mov	r0, r4
 8003698:	4629      	mov	r1, r5
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	014b      	lsls	r3, r1, #5
 80036a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036a8:	0142      	lsls	r2, r0, #5
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	1b00      	subs	r0, r0, r4
 80036b0:	eb61 0105 	sbc.w	r1, r1, r5
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	018b      	lsls	r3, r1, #6
 80036be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c2:	0182      	lsls	r2, r0, #6
 80036c4:	1a12      	subs	r2, r2, r0
 80036c6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ca:	f04f 0000 	mov.w	r0, #0
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	00d9      	lsls	r1, r3, #3
 80036d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d8:	00d0      	lsls	r0, r2, #3
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	1912      	adds	r2, r2, r4
 80036e0:	eb45 0303 	adc.w	r3, r5, r3
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	0299      	lsls	r1, r3, #10
 80036ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036f2:	0290      	lsls	r0, r2, #10
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	f7fd f94e 	bl	80009a4 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	60bb      	str	r3, [r7, #8]
      break;
 800372a:	e002      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800372e:	60bb      	str	r3, [r7, #8]
      break;
 8003730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003732:	68bb      	ldr	r3, [r7, #8]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a9b      	lsrs	r3, r3, #10
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	08004a50 	.word	0x08004a50

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffdc 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08004a50 	.word	0x08004a50

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fe88 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 faa0 	bl	8003d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d001      	beq.n	800386c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e04e      	b.n	800390a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a23      	ldr	r2, [pc, #140]	; (8003918 <HAL_TIM_Base_Start_IT+0xc4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d01d      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_TIM_Base_Start_IT+0xc8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_TIM_Base_Start_IT+0xcc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_TIM_Base_Start_IT+0xd0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIM_Base_Start_IT+0xd4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_TIM_Base_Start_IT+0xd8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x80>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIM_Base_Start_IT+0xdc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d010      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	e007      	b.n	8003908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40001800 	.word	0x40001800

08003934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0202 	mvn.w	r2, #2
 8003960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9bf 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9b1 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9c2 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0204 	mvn.w	r2, #4
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f995 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f987 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f998 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0208 	mvn.w	r2, #8
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f96b 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f95d 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f96e 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2208      	movs	r2, #8
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f941 	bl	8003cfa <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f933 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f944 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0201 	mvn.w	r2, #1
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f90d 	bl	8003cd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 faea 	bl	80040b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f909 	bl	8003d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fab4 	bl	80040a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x1c>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0b4      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x186>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d03e      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0xd4>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	f200 8087 	bhi.w	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	f000 8086 	beq.w	8003cb6 <HAL_TIM_ConfigClockSource+0x172>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d87f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d01a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xa6>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d87b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d050      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x11a>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d877      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d03c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xfa>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d873      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d058      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x13a>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d86f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d064      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d86b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d060      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d867      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d05a      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	e062      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 f9b7 	bl	8003f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
      break;
 8003c16:	e04f      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 f9a0 	bl	8003f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e03c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 f914 	bl	8003e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2150      	movs	r1, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f96d 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e02c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 f933 	bl	8003ed6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2160      	movs	r1, #96	; 0x60
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f95d 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e01c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 f8f4 	bl	8003e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f94d 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f000 f944 	bl	8003f36 <TIM_ITRx_SetConfig>
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a40      	ldr	r2, [pc, #256]	; (8003e4c <TIM_Base_SetConfig+0x114>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d00f      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3d      	ldr	r2, [pc, #244]	; (8003e50 <TIM_Base_SetConfig+0x118>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <TIM_Base_SetConfig+0x11c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <TIM_Base_SetConfig+0x120>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3a      	ldr	r2, [pc, #232]	; (8003e5c <TIM_Base_SetConfig+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <TIM_Base_SetConfig+0x114>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02b      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d98:	d027      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <TIM_Base_SetConfig+0x118>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d023      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <TIM_Base_SetConfig+0x11c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <TIM_Base_SetConfig+0x120>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01b      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <TIM_Base_SetConfig+0x124>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d017      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <TIM_Base_SetConfig+0x128>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <TIM_Base_SetConfig+0x12c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <TIM_Base_SetConfig+0x130>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <TIM_Base_SetConfig+0x134>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <TIM_Base_SetConfig+0x138>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <TIM_Base_SetConfig+0x13c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <TIM_Base_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_Base_SetConfig+0xf8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <TIM_Base_SetConfig+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d103      	bne.n	8003e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40010400 	.word	0x40010400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800
 8003e6c:	40001800 	.word	0x40001800
 8003e70:	40001c00 	.word	0x40001c00
 8003e74:	40002000 	.word	0x40002000

08003e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0201 	bic.w	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 030a 	bic.w	r3, r3, #10
 8003eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b087      	sub	sp, #28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f023 0210 	bic.w	r2, r3, #16
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f043 0307 	orr.w	r3, r3, #7
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	021a      	lsls	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e05a      	b.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d022      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d01d      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a17      	ldr	r2, [pc, #92]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40001800 	.word	0x40001800

080040a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e03f      	b.n	800415e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fa38 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	; 0x24
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f9cb 	bl	80044ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08a      	sub	sp, #40	; 0x28
 800416a:	af02      	add	r7, sp, #8
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	d17c      	bne.n	8004280 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_UART_Transmit+0x2c>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e075      	b.n	8004282 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Transmit+0x3e>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e06e      	b.n	8004282 <HAL_UART_Transmit+0x11c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2221      	movs	r2, #33	; 0x21
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ba:	f7fd fbf5 	bl	80019a8 <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d4:	d108      	bne.n	80041e8 <HAL_UART_Transmit+0x82>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e003      	b.n	80041f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041f8:	e02a      	b.n	8004250 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f8e2 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e036      	b.n	8004282 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3302      	adds	r3, #2
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e007      	b.n	8004242 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	3301      	adds	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1cf      	bne.n	80041fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2200      	movs	r2, #0
 8004262:	2140      	movs	r1, #64	; 0x40
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f8b2 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e006      	b.n	8004282 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08a      	sub	sp, #40	; 0x28
 800428e:	af02      	add	r7, sp, #8
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 808c 	bne.w	80043c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_UART_Receive+0x2e>
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e084      	b.n	80043c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Receive+0x40>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e07d      	b.n	80043c6 <HAL_UART_Receive+0x13c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2222      	movs	r2, #34	; 0x22
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e6:	f7fd fb5f 	bl	80019a8 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d108      	bne.n	8004314 <HAL_UART_Receive+0x8a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e003      	b.n	800431c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004324:	e043      	b.n	80043ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2120      	movs	r1, #32
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f84c 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e042      	b.n	80043c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	b29a      	uxth	r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3302      	adds	r3, #2
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e01f      	b.n	80043a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d007      	beq.n	800437a <HAL_UART_Receive+0xf0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_UART_Receive+0xfe>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e008      	b.n	800439a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004394:	b2da      	uxtb	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1b6      	bne.n	8004326 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b090      	sub	sp, #64	; 0x40
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	e050      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	d04c      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x30>
 80043ee:	f7fd fadb 	bl	80019a8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d241      	bcs.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800441e:	637a      	str	r2, [r7, #52]	; 0x34
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	613b      	str	r3, [r7, #16]
   return(result);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	63bb      	str	r3, [r7, #56]	; 0x38
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004452:	623a      	str	r2, [r7, #32]
 8004454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	69f9      	ldr	r1, [r7, #28]
 8004458:	6a3a      	ldr	r2, [r7, #32]
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00f      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d09f      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3740      	adds	r7, #64	; 0x40
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	b09f      	sub	sp, #124	; 0x7c
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	68d9      	ldr	r1, [r3, #12]
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	ea40 0301 	orr.w	r3, r0, r1
 80044cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	431a      	orrs	r2, r3
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f0:	f021 010c 	bic.w	r1, r1, #12
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fa:	430b      	orrs	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	6999      	ldr	r1, [r3, #24]
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	ea40 0301 	orr.w	r3, r0, r1
 8004514:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4bc5      	ldr	r3, [pc, #788]	; (8004830 <UART_SetConfig+0x384>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d004      	beq.n	800452a <UART_SetConfig+0x7e>
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4bc3      	ldr	r3, [pc, #780]	; (8004834 <UART_SetConfig+0x388>)
 8004526:	429a      	cmp	r2, r3
 8004528:	d103      	bne.n	8004532 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800452a:	f7ff f92f 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 800452e:	6778      	str	r0, [r7, #116]	; 0x74
 8004530:	e002      	b.n	8004538 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004532:	f7ff f917 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004536:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	f040 80b6 	bne.w	80046b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004546:	461c      	mov	r4, r3
 8004548:	f04f 0500 	mov.w	r5, #0
 800454c:	4622      	mov	r2, r4
 800454e:	462b      	mov	r3, r5
 8004550:	1891      	adds	r1, r2, r2
 8004552:	6439      	str	r1, [r7, #64]	; 0x40
 8004554:	415b      	adcs	r3, r3
 8004556:	647b      	str	r3, [r7, #68]	; 0x44
 8004558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800455c:	1912      	adds	r2, r2, r4
 800455e:	eb45 0303 	adc.w	r3, r5, r3
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	00d9      	lsls	r1, r3, #3
 800456c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004570:	00d0      	lsls	r0, r2, #3
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	1911      	adds	r1, r2, r4
 8004578:	6639      	str	r1, [r7, #96]	; 0x60
 800457a:	416b      	adcs	r3, r5
 800457c:	667b      	str	r3, [r7, #100]	; 0x64
 800457e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	461a      	mov	r2, r3
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	1891      	adds	r1, r2, r2
 800458a:	63b9      	str	r1, [r7, #56]	; 0x38
 800458c:	415b      	adcs	r3, r3
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004594:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004598:	f7fc fa04 	bl	80009a4 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4ba5      	ldr	r3, [pc, #660]	; (8004838 <UART_SetConfig+0x38c>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011e      	lsls	r6, r3, #4
 80045aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ac:	461c      	mov	r4, r3
 80045ae:	f04f 0500 	mov.w	r5, #0
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	1891      	adds	r1, r2, r2
 80045b8:	6339      	str	r1, [r7, #48]	; 0x30
 80045ba:	415b      	adcs	r3, r3
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
 80045be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045c2:	1912      	adds	r2, r2, r4
 80045c4:	eb45 0303 	adc.w	r3, r5, r3
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	00d9      	lsls	r1, r3, #3
 80045d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d6:	00d0      	lsls	r0, r2, #3
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	1911      	adds	r1, r2, r4
 80045de:	65b9      	str	r1, [r7, #88]	; 0x58
 80045e0:	416b      	adcs	r3, r5
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	1891      	adds	r1, r2, r2
 80045f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045f2:	415b      	adcs	r3, r3
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045fe:	f7fc f9d1 	bl	80009a4 <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4b8c      	ldr	r3, [pc, #560]	; (8004838 <UART_SetConfig+0x38c>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a87      	ldr	r2, [pc, #540]	; (8004838 <UART_SetConfig+0x38c>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004628:	441e      	add	r6, r3
 800462a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462c:	4618      	mov	r0, r3
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	1894      	adds	r4, r2, r2
 8004638:	623c      	str	r4, [r7, #32]
 800463a:	415b      	adcs	r3, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004642:	1812      	adds	r2, r2, r0
 8004644:	eb41 0303 	adc.w	r3, r1, r3
 8004648:	f04f 0400 	mov.w	r4, #0
 800464c:	f04f 0500 	mov.w	r5, #0
 8004650:	00dd      	lsls	r5, r3, #3
 8004652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004656:	00d4      	lsls	r4, r2, #3
 8004658:	4622      	mov	r2, r4
 800465a:	462b      	mov	r3, r5
 800465c:	1814      	adds	r4, r2, r0
 800465e:	653c      	str	r4, [r7, #80]	; 0x50
 8004660:	414b      	adcs	r3, r1
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	461a      	mov	r2, r3
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	1891      	adds	r1, r2, r2
 8004670:	61b9      	str	r1, [r7, #24]
 8004672:	415b      	adcs	r3, r3
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800467e:	f7fc f991 	bl	80009a4 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <UART_SetConfig+0x38c>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	; 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a67      	ldr	r2, [pc, #412]	; (8004838 <UART_SetConfig+0x38c>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4432      	add	r2, r6
 80046ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046ae:	e0b9      	b.n	8004824 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b2:	461c      	mov	r4, r3
 80046b4:	f04f 0500 	mov.w	r5, #0
 80046b8:	4622      	mov	r2, r4
 80046ba:	462b      	mov	r3, r5
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	6139      	str	r1, [r7, #16]
 80046c0:	415b      	adcs	r3, r3
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046c8:	1912      	adds	r2, r2, r4
 80046ca:	eb45 0303 	adc.w	r3, r5, r3
 80046ce:	f04f 0000 	mov.w	r0, #0
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	00d9      	lsls	r1, r3, #3
 80046d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046dc:	00d0      	lsls	r0, r2, #3
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	eb12 0804 	adds.w	r8, r2, r4
 80046e6:	eb43 0905 	adc.w	r9, r3, r5
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	008b      	lsls	r3, r1, #2
 80046fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004702:	0082      	lsls	r2, r0, #2
 8004704:	4640      	mov	r0, r8
 8004706:	4649      	mov	r1, r9
 8004708:	f7fc f94c 	bl	80009a4 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b49      	ldr	r3, [pc, #292]	; (8004838 <UART_SetConfig+0x38c>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011e      	lsls	r6, r3, #4
 800471a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471c:	4618      	mov	r0, r3
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	1894      	adds	r4, r2, r2
 8004728:	60bc      	str	r4, [r7, #8]
 800472a:	415b      	adcs	r3, r3
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004732:	1812      	adds	r2, r2, r0
 8004734:	eb41 0303 	adc.w	r3, r1, r3
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	f04f 0500 	mov.w	r5, #0
 8004740:	00dd      	lsls	r5, r3, #3
 8004742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004746:	00d4      	lsls	r4, r2, #3
 8004748:	4622      	mov	r2, r4
 800474a:	462b      	mov	r3, r5
 800474c:	1814      	adds	r4, r2, r0
 800474e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004750:	414b      	adcs	r3, r1
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4618      	mov	r0, r3
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800476c:	0082      	lsls	r2, r0, #2
 800476e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004772:	f7fc f917 	bl	80009a4 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <UART_SetConfig+0x38c>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	; 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	3332      	adds	r3, #50	; 0x32
 800478e:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <UART_SetConfig+0x38c>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479a:	441e      	add	r6, r3
 800479c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479e:	4618      	mov	r0, r3
 80047a0:	f04f 0100 	mov.w	r1, #0
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	1894      	adds	r4, r2, r2
 80047aa:	603c      	str	r4, [r7, #0]
 80047ac:	415b      	adcs	r3, r3
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b4:	1812      	adds	r2, r2, r0
 80047b6:	eb41 0303 	adc.w	r3, r1, r3
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	f04f 0500 	mov.w	r5, #0
 80047c2:	00dd      	lsls	r5, r3, #3
 80047c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047c8:	00d4      	lsls	r4, r2, #3
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	eb12 0a00 	adds.w	sl, r2, r0
 80047d2:	eb43 0b01 	adc.w	fp, r3, r1
 80047d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ee:	0082      	lsls	r2, r0, #2
 80047f0:	4650      	mov	r0, sl
 80047f2:	4659      	mov	r1, fp
 80047f4:	f7fc f8d6 	bl	80009a4 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <UART_SetConfig+0x38c>)
 80047fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2164      	movs	r1, #100	; 0x64
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	; 0x32
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <UART_SetConfig+0x38c>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 020f 	and.w	r2, r3, #15
 800481c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4432      	add	r2, r6
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	377c      	adds	r7, #124	; 0x7c
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	40011000 	.word	0x40011000
 8004834:	40011400 	.word	0x40011400
 8004838:	51eb851f 	.word	0x51eb851f

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4d0d      	ldr	r5, [pc, #52]	; (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2600      	movs	r6, #0
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4d0b      	ldr	r5, [pc, #44]	; (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	; (8004880 <__libc_init_array+0x44>)
 8004850:	f000 f820 	bl	8004894 <_init>
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2600      	movs	r6, #0
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f855 3b04 	ldr.w	r3, [r5], #4
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f855 3b04 	ldr.w	r3, [r5], #4
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	08004a68 	.word	0x08004a68
 8004878:	08004a68 	.word	0x08004a68
 800487c:	08004a68 	.word	0x08004a68
 8004880:	08004a6c 	.word	0x08004a6c

08004884 <memset>:
 8004884:	4402      	add	r2, r0
 8004886:	4603      	mov	r3, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
